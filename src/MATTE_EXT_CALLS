/*
Copyright (c) 2023, Johnathan Corkery. (jcorkery@umich.edu)
All rights reserved.

This file is part of the Matte project (https://github.com/jcorks/matte)
matte was released under the MIT License, as detailed below.



Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is furnished 
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.


*/
//
static int vm_ext_call__forever_restart_condition(
    matteVM_t * vm,
    matteVMStackFrame_t * frame, 
    matteValue_t result,
    void * data
) {
    return 1;
}


typedef struct {
    double i;
    double end;
    double offset;
    int usesi;
} ForLoopData;
static int vm_ext_call__for_restart_condition__up(
    matteVM_t * vm,
    matteVMStackFrame_t * frame, 
    matteValue_t res,
    void * data
) {
    ForLoopData * d = (ForLoopData*)data;
    if (res.binID != 0) {
        d->i = matte_value_as_number(vm->store, res);
    } else {
        d->i += d->offset;
    }
    if (d->usesi) {
        matteValue_t v = matte_store_new_value(vm->store);
        matte_value_into_number(vm->store, &v, d->i);
        matte_value_object_function_set_closure_value(vm->store, frame->context, 1, v);
        matte_store_recycle(vm->store, v);
    }
    return d->i < d->end;
}


static int vm_ext_call__for_restart_condition__down(
    matteVM_t * vm,
    matteVMStackFrame_t * frame, 
    matteValue_t res,
    void * data
) {
    ForLoopData * d = (ForLoopData*)data;
    if (res.binID != 0) {
        d->i = matte_value_as_number(vm->store, res);
    } else {
        d->i += d->offset;
    }
    if (d->usesi) {
        matteValue_t v = matte_store_new_value(vm->store);
        matte_value_into_number(vm->store, &v, d->i);
        matte_value_object_function_set_closure_value(vm->store, frame->context, 1, v);
        matte_store_recycle(vm->store, v);
    }
    return d->i > d->end;
}







static matteValue_t vm_ext_call__noop(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    return matte_store_new_value(vm->store);
}

static matteValue_t vm_ext_call__breakpoint(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (vm->debug) {
        matteVMStackFrame_t frame = matte_vm_get_stackframe(vm, 0);
        uint32_t numinst;
        const matteBytecodeStubInstruction_t * inst = matte_bytecode_stub_get_instructions(frame.stub, &numinst);
        uint32_t line = 0;
        if (frame.pc-1 < numinst && frame.pc-1 >= 0)
            line = inst[frame.pc-1].lineNumber;        
        vm->debug(
            vm,
            MATTE_VM_DEBUG_EVENT__BREAKPOINT,
            matte_bytecode_stub_get_file_id(frame.stub),
            line,
            matte_store_new_value(vm->store),
            vm->debugData                   
        );
    }    

    return matte_store_new_value(vm->store);
}


static matteValue_t vm_ext_call__getexternalfunction(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t a = args[0];
    const matteString_t * str = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, a));
    // string conversion likely threw an error.
    if (vm->pendingCatchable) {
        return matte_store_new_value(vm->store);
    }

    uint32_t * id = (uint32_t*)matte_table_find(vm->externalFunctions, str);
    if (!id) {
        matteString_t * strerr = matte_string_create_from_c_str("%s", "getExternalFunction() was unable to find an external function of the name: ");
        matte_string_concat(strerr, str);
        matte_vm_raise_error_string(vm, strerr);
        matte_string_destroy(strerr);
        return matte_store_new_value(vm->store);
    }

    matteValue_t out = matte_store_new_value(vm->store);
    matte_value_into_new_function_ref(vm->store, &out, matte_array_at(vm->extStubs, matteBytecodeStub_t *, *id));

    matte_deallocate(id);
    matte_table_remove(vm->externalFunctions, str);    
    return out;
}
static matteValue_t vm_ext_call__print(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    const matteString_t * str = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, args[0]));
    if (str && vm->userPrint) {
        vm->userPrint(vm, str, vm->userPrintData);
    }
    return matte_store_new_value(vm->store);
}
static matteValue_t vm_ext_call__send(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
     if (vm->pendingCatchable) {
        #ifdef MATTE_DEBUG
            assert(!"VM has a new message sent before previous message could be caught. This is not allowed and is /probably/ indicative of internal VM error.");
        #endif
    }
    matteValue_t b = matte_store_new_value(vm->store);
    matte_value_into_copy(vm->store, &b, args[0]);    
    matte_value_object_push_lock(vm->store, b);

    vm->catchable = b;
    vm->pendingCatchable = 1;
    vm->pendingCatchableIsError = 0;

    matteVMStackFrame_t framesrc = matte_vm_get_stackframe(vm, 0);
    uint32_t instcount;
    const matteBytecodeStubInstruction_t * inst = matte_bytecode_stub_get_instructions(framesrc.stub, &instcount);        
    int lineNumber = 0;
    if (framesrc.pc - 1 < instcount) {
        lineNumber = inst[framesrc.pc-1].lineNumber;                
    } 
    vm->errorLastFile = matte_bytecode_stub_get_file_id(framesrc.stub);
    vm->errorLastLine = lineNumber;
    return matte_store_new_value(vm->store);
}

static matteValue_t vm_ext_call__error(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matte_vm_raise_error(vm, args[0]);
    return matte_store_new_value(vm->store);
}








#include "MATTE_ROM"


static matteValue_t vm_ext_call__import(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (vm->pendingCatchable) {
        return matte_store_new_value(vm->store);
    }

    matteValue_t a = args[0];
    matteValue_t params = args[1];
    
    if (matte_value_type(a) != MATTE_VALUE_TYPE_STRING) {
        matte_vm_raise_error_string(vm, MATTE_VM_STR_CAST(vm, "Argument to import MUST be a string."));        
        return matte_store_new_value(vm->store);    
    }
    
    
    const matteString_t * strSrc = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, a));


    // first, see if the requested script has been preloaded
    uint32_t * fileidPtr = (uint32_t*)matte_table_find(vm->importName2ID, strSrc);
    uint32_t fileid = fileidPtr ? *fileidPtr : 0;
    
    // if the name does not have a fileid associated with it,
    // call the import function.
    if (!fileid) {
        if (vm->importFunction) {
            fileid = vm->importFunction(
                vm,
                strSrc,
                vm->importFunctionData
            );        
        }
    }
    
    if (!fileid) {
        matteString_t * err = matte_string_create_from_c_str("Could not import '%s'", matte_string_get_c_str(strSrc));
        matte_vm_raise_error_string(vm, err);        
        return matte_store_new_value(vm->store);
    }
    
    
    matteValue_t * v = (matteValue_t*)matte_table_find_by_uint(vm->imported, fileid);
    if (v) {
        #ifdef MATTE_DEBUG
            //printf("import() returning pre-computed value\n");
            //fflush(stdout);
        #endif
    } else {
        v = (matteValue_t*)matte_allocate(sizeof(matteValue_t));
       *v = matte_vm_run_fileid(vm, fileid, params);
       matte_table_insert_by_uint(vm->imported, fileid, v);
    }

    return *v;
}





