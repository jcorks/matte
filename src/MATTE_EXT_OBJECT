static int ensure_arg_object(matteVM_t * vm, const matteValue_t * args) {
    if (args[0].binID != MATTE_VALUE_TYPE_OBJECT) {
        matte_vm_raise_error_cstring(vm, "Built-in Object function expects a value of type Object to work with.");
        return 0;                
    }
    return 1;
}
static matteValue_t vm_ext_call__object__keys(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    return matte_value_object_keys(vm->heap, args[0]);
}


static matteValue_t vm_ext_call__object__values(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    return matte_value_object_values(vm->heap, args[0]);
}


static matteValue_t vm_ext_call__object__keycount(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matteValue_t out = matte_heap_new_value(vm->heap);
    matte_value_into_number(vm->heap, &out, matte_value_object_get_key_count(vm->heap, args[0]));
    return out;
}

static matteValue_t vm_ext_call__object__length(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matteValue_t out = matte_heap_new_value(vm->heap);
    matte_value_into_number(vm->heap, &out, matte_value_object_get_number_key_count(vm->heap, args[0]));
    return out;
}

static matteValue_t vm_ext_call__object__push(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matteValue_t key = {};
    matte_value_into_number(vm->heap, &key, matte_value_object_get_number_key_count(vm->heap, args[0]));
    matte_value_object_set(vm->heap, args[0], key, args[1], 1);
    return args[0];
}

static matteValue_t vm_ext_call__object__pop(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matteValue_t key = {};
    uint32_t index = matte_value_object_get_number_key_count(vm->heap, args[0]) - 1;
    matte_value_into_number(vm->heap, &key, index);

    matteValue_t * at = matte_value_object_access_direct(vm->heap, args[0], key, 1);
    if (at) {
        matte_value_object_remove_key(vm->heap, args[0], key);
        return *at;            
    }

    return matte_heap_new_value(vm->heap);
}

static matteValue_t vm_ext_call__object__insert(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matte_value_object_insert(vm->heap, args[0], matte_value_as_number(vm->heap, args[1]), args[2]);
    return matte_heap_new_value(vm->heap);
}


static matteValue_t vm_ext_call__object__remove(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    if (args[1].binID) {
        matte_value_object_remove_key(vm->heap, 
            args[0],
            args[1]
        );
    } else if (args[2].binID && args[2].binID == MATTE_VALUE_TYPE_OBJECT) {
        uint32_t i;
        uint32_t len = matte_value_object_get_key_count(vm->heap, args[2]);
        for(i = 0; i < len; ++i) {
            matteValue_t v = matte_value_object_access_index(vm->heap, args[2], i);        
            matte_value_object_remove_key(vm->heap, 
                args[0],
                v
            );
            matte_heap_recycle(vm->heap, v);
        }
    }
    return matte_heap_new_value(vm->heap);
}

static matteValue_t vm_ext_call__object__set_attributes(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);

    matteValue_t b = args[1];
    if (b.binID != MATTE_VALUE_TYPE_OBJECT) {
        matte_vm_raise_error_string(vm, MATTE_VM_STR_CAST(vm, "'setAttributes' requires an Object to be the 'attributes'"));
        return matte_heap_new_value(vm->heap);
    }

    matte_value_object_set_attributes(vm->heap, 
        args[0],
        b
    );
    return matte_heap_new_value(vm->heap);
}

static matteValue_t vm_ext_call__object__get_attributes(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);

    matteValue_t out = matte_heap_new_value(vm->heap);

    const matteValue_t * op = matte_value_object_get_attributes_unsafe(vm->heap, args[0]);
    if (op)
        matte_value_into_copy(vm->heap, &out, *op);

    return out;
}


static matteValue_t vm_ext_call__object__sort(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    if (args[1].binID != MATTE_VALUE_TYPE_FUNCTION) {
        matte_vm_raise_error_cstring(vm, "A function comparator is required for sorting.");        
        return matte_heap_new_value(vm->heap);

    }
    matte_value_object_sort_unsafe(vm->heap, args[0], args[1]);
    return matte_heap_new_value(vm->heap);
}


static matteValue_t vm_ext_call__object__subset(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);

    uint32_t from = 0;
    uint32_t to = 0;
    from = matte_value_as_number(vm->heap, args[1]);
    to = matte_value_as_number(vm->heap, args[2]);

    return matte_value_subset(vm->heap, args[0], from, to);
}



static matteValue_t vm_ext_call__object__filter(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matte_value_object_push_lock(vm->heap, args[0]);
    
    matteValue_t out = matte_heap_new_value(vm->heap);
    matte_value_object_push_lock(vm->heap, out);
    
    matteArray_t names = MATTE_ARRAY_CAST(&vm->specialString_value, matteValue_t, 1);
    
    uint32_t len = matte_value_object_get_number_key_count(vm->heap, args[0]);
    uint32_t i;
    uint32_t ctout = 0;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        matteValue_t v = matte_value_object_access_index(vm->heap, args[0], i);
        matteArray_t argsv = MATTE_ARRAY_CAST(&v, matteValue_t, 1);

        if (matte_value_as_boolean(vm->heap, matte_vm_call(vm, fn, &argsv, &names, NULL))) {
            matte_value_object_set_index_unsafe(vm->heap, out, ctout++, v);
        }
    }
    
    matte_value_object_pop_lock(vm->heap, args[0]);
    matte_value_object_pop_lock(vm->heap, out);
    return out;
}


static matteValue_t vm_ext_call__object__findindex(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matte_value_object_push_lock(vm->heap, args[0]);
    matte_value_object_push_lock(vm->heap, args[1]);
    
    
    matteValue_t out = {};   
    matte_value_into_number(vm->heap, &out, -1);
    uint32_t len = matte_value_object_get_number_key_count(vm->heap, args[0]);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        matteValue_t v = matte_value_object_access_index(vm->heap, args[0], i);

        if (matte_value_as_boolean(vm->heap, vm_operator__eq(vm, v, args[1])))  {
            matte_value_into_number(vm->heap, &out, i);
            break;
        }
    }
    
    matte_value_object_pop_lock(vm->heap, args[0]);
    matte_value_object_pop_lock(vm->heap, args[1]);

    return out;
}

static matteValue_t vm_ext_call__object__newtype(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t out = matte_heap_new_value(vm->heap);
    matte_value_into_new_type(vm->heap, &out, args[0], args[1]);
    return out;
}

static matteValue_t vm_ext_call__object__instantiate(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t out = matte_heap_new_value(vm->heap);
    matte_value_into_new_object_ref_typed(vm->heap, &out, args[0]);
    return out;
}

static matteValue_t vm_ext_call__object__is(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t out = {};
    matte_value_into_boolean(vm->heap, &out, matte_value_isa(vm->heap, args[0], args[1]));
    return out;
}

static matteValue_t vm_ext_call__object__map(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matte_value_object_push_lock(vm->heap, args[0]);
    matte_value_object_push_lock(vm->heap, fn);
    
    
    matteArray_t names = MATTE_ARRAY_CAST(&vm->specialString_value, matteValue_t, 1);
    
    uint32_t len = matte_value_object_get_number_key_count(vm->heap, args[0]);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        matteValue_t v = matte_value_object_access_index(vm->heap, args[0], i);
        matteArray_t argsv = MATTE_ARRAY_CAST(&v, matteValue_t, 1);

        matteValue_t newv = matte_vm_call(vm, fn, &argsv, &names, NULL);
        matte_value_object_set_index_unsafe(vm->heap, args[0], i, newv);
    }
    
    matte_value_object_pop_lock(vm->heap, args[0]);
    matte_value_object_pop_lock(vm->heap, fn);
    return matte_heap_new_value(vm->heap);
}

static matteValue_t vm_ext_call__object__reduce(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_heap_new_value(vm->heap);
    matte_value_object_push_lock(vm->heap, args[0]);
    matte_value_object_push_lock(vm->heap, fn);
    
    matteValue_t nameValues[] = {
        vm->specialString_previous,
        vm->specialString_value
    };
    matteValue_t argValues[2];
    matteArray_t names = MATTE_ARRAY_CAST(&nameValues, matteValue_t, 2);
    matteValue_t out = matte_heap_new_value(vm->heap);
    
    uint32_t len = matte_value_object_get_number_key_count(vm->heap, args[0]);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        
               
        argValues[0] = out;
        argValues[1] = matte_value_object_access_index(vm->heap, args[0], i);;
        matteArray_t argsv = MATTE_ARRAY_CAST(&argValues, matteValue_t, 2);

    
        matteValue_t newv = matte_vm_call(vm, fn, &argsv, &names, NULL);
        matte_value_object_pop_lock(vm->heap, out);
        matte_value_into_copy(vm->heap, &out, newv);
        matte_value_object_push_lock(vm->heap, out);

    }
    matte_value_object_pop_lock(vm->heap, out);
    matte_value_object_pop_lock(vm->heap, args[0]);
    matte_value_object_pop_lock(vm->heap, fn);
    return out;
}

