/*
Copyright (c) 2023, Johnathan Corkery. (jcorkery@umich.edu)
All rights reserved.

This file is part of the Matte project (https://github.com/jcorks/matte)
matte was released under the MIT License, as detailed below.



Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is furnished 
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.


*/
//
static int ensure_arg_object(matteVM_t * vm, const matteValue_t * args) {
    if (args[0].binID != MATTE_VALUE_TYPE_OBJECT) {
        matte_vm_raise_error_cstring(vm, "Built-in Object function expects a value of type Object to work with.");
        return 0;                
    }
    return 1;
}
static matteValue_t vm_ext_call__object__keys(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    return matte_value_object_keys(vm->store, args[0]);
}


static matteValue_t vm_ext_call__object__values(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    return matte_value_object_values(vm->store, args[0]);
}


static matteValue_t vm_ext_call__object__keycount(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matteValue_t out = matte_store_new_value(vm->store);
    matte_value_into_number(vm->store, &out, matte_value_object_get_key_count(vm->store, args[0]));
    return out;
}

static matteValue_t vm_ext_call__object__length(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matteValue_t out = matte_store_new_value(vm->store);
    matte_value_into_number(vm->store, &out, matte_value_object_get_number_key_count(vm->store, args[0]));
    return out;
}

static matteValue_t vm_ext_call__object__push(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matteValue_t key = {};
    matte_value_into_number(vm->store, &key, matte_value_object_get_number_key_count(vm->store, args[0]));
    matte_value_object_set(vm->store, args[0], key, args[1], 1);
    return args[0];
}

static matteValue_t vm_ext_call__object__setsize(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matte_value_object_array_set_size_unsafe(vm->store, args[0], matte_value_as_number(vm->store, args[1]));
    return args[0];
}


static matteValue_t vm_ext_call__object__pop(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matteValue_t key = {};
    uint32_t index = matte_value_object_get_number_key_count(vm->store, args[0]) - 1;
    matte_value_into_number(vm->store, &key, index);

    matteValue_t * at = matte_value_object_access_direct(vm->store, args[0], key, 1);
    if (at) {
        matte_value_object_remove_key(vm->store, args[0], key);
        return *at;            
    }

    return matte_store_new_value(vm->store);
}

static matteValue_t vm_ext_call__object__insert(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matte_value_object_insert(vm->store, args[0], matte_value_as_number(vm->store, args[1]), args[2]);
    return args[0];
}


static matteValue_t vm_ext_call__object__remove(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    if (args[1].binID) {
        matte_value_object_remove_key(vm->store, 
            args[0],
            args[1]
        );
    } else if (args[2].binID) {
        if (args[2].binID != MATTE_VALUE_TYPE_OBJECT) {
            matte_vm_raise_error_string(vm, MATTE_VM_STR_CAST(vm, "'keys' for remove query requires argument to be an Object."));
            return matte_store_new_value(vm->store);            
        }
        uint32_t i;
        uint32_t len = matte_value_object_get_number_key_count(vm->store, args[2]);
        for(i = 0; i < len; ++i) {
            matteValue_t v = matte_value_object_access_index(vm->store, args[2], i);        
            matte_value_object_remove_key(vm->store, 
                args[0],
                v
            );
            matte_store_recycle(vm->store, v);
        }
    }
    return matte_store_new_value(vm->store);
}

static matteValue_t vm_ext_call__object__set_attributes(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);

    matteValue_t b = args[1];
    if (b.binID != MATTE_VALUE_TYPE_OBJECT) {
        matte_vm_raise_error_string(vm, MATTE_VM_STR_CAST(vm, "'setAttributes' requires an Object to be the 'attributes'"));
        return matte_store_new_value(vm->store);
    }

    matte_value_object_set_attributes(vm->store, 
        args[0],
        b
    );
    return matte_store_new_value(vm->store);
}

static matteValue_t vm_ext_call__object__get_attributes(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);

    matteValue_t out = matte_store_new_value(vm->store);

    const matteValue_t * op = matte_value_object_get_attributes_unsafe(vm->store, args[0]);
    if (op)
        matte_value_into_copy(vm->store, &out, *op);

    return out;
}


static matteValue_t vm_ext_call__object__sort(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    if (!matte_value_is_function(args[1])) {
        matte_vm_raise_error_cstring(vm, "A function comparator is required for sorting.");        
        return matte_store_new_value(vm->store);

    }
    matte_value_object_sort_unsafe(vm->store, args[0], args[1]);
    return matte_store_new_value(vm->store);
}


static matteValue_t vm_ext_call__object__subset(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);

    uint32_t from = 0;
    uint32_t to = 0;
    from = matte_value_as_number(vm->store, args[1]);
    to = matte_value_as_number(vm->store, args[2]);

    return matte_value_subset(vm->store, args[0], from, to);
}



static matteValue_t vm_ext_call__object__filter(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matte_value_object_push_lock(vm->store, args[0]);
    matte_value_object_push_lock(vm->store, args[1]);
    
    matteValue_t out = matte_store_new_value(vm->store);
    matte_value_into_new_object_ref(vm->store, &out);
    matte_value_object_push_lock(vm->store, out);
    
    matteArray_t namesSrc = MATTE_ARRAY_CAST(&vm->specialString_value, matteValue_t, 1);
    matteArray_t * names = matte_array_clone(&namesSrc);
    
    uint32_t len = matte_value_object_get_number_key_count(vm->store, args[0]);
    uint32_t i;
    uint32_t ctout = 0;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        matteValue_t v = matte_value_object_access_index(vm->store, args[0], i);
        matteArray_t argsv = MATTE_ARRAY_CAST(&v, matteValue_t, 1);

        if (matte_value_as_boolean(vm->store, matte_vm_call(vm, args[1], &argsv, names, NULL))) {
            matte_value_object_insert(vm->store, out, ctout++, v);
        }
    }
    
    matte_value_object_pop_lock(vm->store, args[0]);
    matte_value_object_pop_lock(vm->store, args[1]);
    matte_value_object_pop_lock(vm->store, out);
    
    matte_array_destroy(names);
    return out;
}


static matteValue_t vm_ext_call__object__findindex(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    if (args[1].binID != MATTE_VALUE_TYPE_EMPTY &&
        args[2].binID != MATTE_VALUE_TYPE_EMPTY) {
        matte_vm_raise_error_cstring(vm, "findIndex() cannot have both 'value' and 'query' specified.");        
        return matte_store_new_value(vm->store);                   
    }


    matte_value_object_push_lock(vm->store, args[0]);
    matte_value_object_push_lock(vm->store, args[1]);
    matte_value_object_push_lock(vm->store, args[2]);
    
    
    
    matteValue_t out = {};   
    matte_value_into_number(vm->store, &out, -1);
    uint32_t len = matte_value_object_get_number_key_count(vm->store, args[0]);
    uint32_t i;
    
    if (args[2].binID) {
        if (!matte_value_is_callable(vm->store, args[2])) {
            matte_vm_raise_error_cstring(vm, "When specified, the query parameter for findIndex() must be callable.");        
        } else {
            matteArray_t namesSrc = MATTE_ARRAY_CAST(&vm->specialString_value, matteValue_t, 1);
            matteArray_t * names = matte_array_clone(&namesSrc);
            for(i = 0; i < len; ++i) {
                if (vm->pendingCatchable) break;
                matteValue_t v = matte_value_object_access_index(vm->store, args[0], i);
                matteArray_t argsv = MATTE_ARRAY_CAST(&v, matteValue_t, 1);

                if (matte_value_as_boolean(vm->store, matte_vm_call(vm, args[2], &argsv, names, NULL))) {
                    matte_value_into_number(vm->store, &out, i);
                    break;
                }
            }
            
            matte_array_destroy(names);
        }
    } else {
        for(i = 0; i < len; ++i) {
            if (vm->pendingCatchable) break;
            matteValue_t v = matte_value_object_access_index(vm->store, args[0], i);

            if (matte_value_as_boolean(vm->store, vm_operator__eq(vm, v, args[1])))  {
                matte_value_into_number(vm->store, &out, i);
                break;
            }
        }
    }
    matte_value_object_pop_lock(vm->store, args[0]);
    matte_value_object_pop_lock(vm->store, args[1]);
    matte_value_object_pop_lock(vm->store, args[2]);

    return out;
}

static matteValue_t vm_ext_call__object__newtype(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t out = matte_value_create_type(vm->store, args[0], args[1], args[2]);
    return out;
}

static matteValue_t vm_ext_call__object__instantiate(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t out = matte_store_new_value(vm->store);
    matte_value_into_new_object_ref_typed(vm->store, &out, args[0]);
    return out;
}

static matteValue_t vm_ext_call__object__freeze_gc(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!vm->userGCFreeze) {
        matte_store_push_lock_gc(vm->store);
        vm->userGCFreeze = 1;
    }
    return matte_store_new_value(vm->store);
}


static matteValue_t vm_ext_call__object__thaw_gc(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (vm->userGCFreeze) {
        matte_store_pop_lock_gc(vm->store);
        vm->userGCFreeze = 0;
    }
    return matte_store_new_value(vm->store);
}

static matteValue_t vm_ext_call__object__garbage_collect(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (vm->userGCFreeze) {
        matte_store_pop_lock_gc(vm->store);
    }
    matte_store_garbage_collect(vm->store);
    if (vm->userGCFreeze) {
        matte_store_push_lock_gc(vm->store);
    }
    return matte_store_new_value(vm->store);
}

static matteValue_t vm_ext_call__object__is(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t out = {};
    matte_value_into_boolean(vm->store, &out, matte_value_isa(vm->store, args[0], args[1]));
    return out;
}

static matteValue_t vm_ext_call__object__map(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matte_value_object_push_lock(vm->store, args[0]);
    matte_value_object_push_lock(vm->store, args[1]);
    matte_value_object_push_lock(vm->store, fn);
    
    
    matteArray_t names = MATTE_ARRAY_CAST(&vm->specialString_value, matteValue_t, 1);
    
    uint32_t len = matte_value_object_get_number_key_count(vm->store, args[0]);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        matteValue_t v = matte_value_object_access_index(vm->store, args[0], i);
        matteArray_t argsv = MATTE_ARRAY_CAST(&v, matteValue_t, 1);

        matteValue_t newv = matte_vm_call(vm, args[1], &argsv, &names, NULL);
        matte_value_object_set_index_unsafe(vm->store, args[0], i, newv);
    }
    
    matte_value_object_pop_lock(vm->store, args[0]);
    matte_value_object_pop_lock(vm->store, args[1]);
    matte_value_object_pop_lock(vm->store, fn);
    return args[0];
}

static matteValue_t vm_ext_call__object__reduce(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matte_value_object_push_lock(vm->store, args[0]);
    matte_value_object_push_lock(vm->store, args[1]);
    matte_value_object_push_lock(vm->store, fn);
    
    matteValue_t nameValues[] = {
        vm->specialString_previous,
        vm->specialString_value
    };
    matteValue_t argValues[2];
    matteArray_t names = MATTE_ARRAY_CAST(&nameValues, matteValue_t, 2);
    matteValue_t out = matte_store_new_value(vm->store);
    
    uint32_t len = matte_value_object_get_number_key_count(vm->store, args[0]);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        
               
        argValues[0] = out;
        argValues[1] = matte_value_object_access_index(vm->store, args[0], i);;
        matteArray_t argsv = MATTE_ARRAY_CAST(&argValues, matteValue_t, 2);

    
        matteValue_t newv = matte_vm_call(vm, args[1], &argsv, &names, NULL);
        matte_value_object_pop_lock(vm->store, out);
        matte_value_into_copy(vm->store, &out, newv);
        matte_value_object_push_lock(vm->store, out);

    }
    matte_value_object_pop_lock(vm->store, out);
    matte_value_object_pop_lock(vm->store, args[0]);
    matte_value_object_pop_lock(vm->store, args[1]);
    matte_value_object_pop_lock(vm->store, fn);
    return out;
}

static matteValue_t vm_ext_call__object__any(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matte_value_object_push_lock(vm->store, args[0]);
    matte_value_object_push_lock(vm->store, fn);
    
    matteValue_t nameValues[] = {
        vm->specialString_value
    };
    matteValue_t argValues[1];
    matteArray_t names = MATTE_ARRAY_CAST(&nameValues, matteValue_t, 1);
    matteValue_t out = matte_store_new_value(vm->store);
    matte_value_into_boolean(vm->store, &out, 0);
    
    uint32_t len = matte_value_object_get_number_key_count(vm->store, args[0]);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        
               
        argValues[0] = matte_value_object_access_index(vm->store, args[0], i);
        matteArray_t argsv = MATTE_ARRAY_CAST(&argValues, matteValue_t, 1);

    
        matteValue_t newv = matte_vm_call(vm, args[1], &argsv, &names, NULL);
        if (matte_value_as_boolean(vm->store, newv) == 1) {
            matte_store_recycle(vm->store, newv);
            matte_value_into_boolean(vm->store, &out, 1);
            break;
        }

    }
    matte_value_object_pop_lock(vm->store, args[0]);
    matte_value_object_pop_lock(vm->store, fn);
    return out;
}

static matteValue_t vm_ext_call__object__all(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_object(vm, args)) return matte_store_new_value(vm->store);
    matte_value_object_push_lock(vm->store, args[0]);
    matte_value_object_push_lock(vm->store, fn);
    
    matteValue_t nameValues[] = {
        vm->specialString_value
    };
    matteValue_t argValues[1];
    matteArray_t names = MATTE_ARRAY_CAST(&nameValues, matteValue_t, 1);
    matteValue_t out = matte_store_new_value(vm->store);
    matte_value_into_boolean(vm->store, &out, 1);
    
    uint32_t len = matte_value_object_get_number_key_count(vm->store, args[0]);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        
               
        argValues[0] = matte_value_object_access_index(vm->store, args[0], i);
        matteArray_t argsv = MATTE_ARRAY_CAST(&argValues, matteValue_t, 1);

    
        matteValue_t newv = matte_vm_call(vm, args[1], &argsv, &names, NULL);
        if (matte_value_as_boolean(vm->store, newv) == 0) {
            matte_store_recycle(vm->store, newv);
            matte_value_into_boolean(vm->store, &out, 0);
            break;
        }

    }
    matte_value_object_pop_lock(vm->store, args[0]);
    matte_value_object_pop_lock(vm->store, fn);
    return out;
}




static matteValue_t vm_ext_call__object__foreach(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t a = args[0];
    matteValue_t b = args[1];
    
    if (!matte_value_is_callable(vm->store, b)) {
        matte_vm_raise_error_string(vm, MATTE_VM_STR_CAST(vm, "'foreach' requires the first argument to be a function."));
        return matte_store_new_value(vm->store);
    }
    matte_value_object_foreach(vm->store, a, b);
    return a;
}


static matteValue_t vm_ext_call__object__set_is_interface(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    matteValue_t a = args[0];
    matteValue_t b = args[1];
    matteValue_t c = args[2];

    int bb = matte_value_as_boolean(vm->store, b);
    if (vm->pendingCatchable) return matte_store_new_value(vm->store);

    matte_value_object_set_is_interface(vm->store, a, bb, c);

    return matte_store_new_value(vm->store);
}





