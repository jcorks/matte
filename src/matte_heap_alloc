// heaps facilitate tracking of references
// In heap debug mode, each reference is has its calling location tracked

matteValue_t matte_heap_new_value_(matteHeap_t *);
void matte_value_into_empty_(matteHeap_t *, matteValue_t *);
void matte_value_into_number_(matteHeap_t *, matteValue_t *, double);
void matte_value_into_boolean_(matteHeap_t *, matteValue_t *, int);
void matte_value_into_string_(matteHeap_t *, matteValue_t *, const matteString_t *);
void matte_value_into_new_object_ref_(matteHeap_t *, matteValue_t *);
void matte_value_into_new_object_ref_typed_(matteHeap_t *, matteValue_t *, matteValue_t type);
void matte_value_into_new_type_(matteHeap_t *, matteValue_t *, matteValue_t name, matteValue_t inherits);
void matte_value_into_new_object_literal_ref_(matteHeap_t *, matteValue_t *, const matteArray_t *);
void matte_value_into_new_object_array_ref_(matteHeap_t *, matteValue_t * v, const matteArray_t *);
void matte_value_into_new_function_ref_(matteHeap_t *, matteValue_t *, matteBytecodeStub_t *);
void matte_value_into_new_typed_function_ref_(matteHeap_t *, matteValue_t *, matteBytecodeStub_t * stub, const matteArray_t * args);
void matte_value_into_copy_(matteHeap_t *, matteValue_t *, matteValue_t from);
void matte_value_object_push_lock_(matteHeap_t *, matteValue_t v);
void matte_value_object_pop_lock_(matteHeap_t *, matteValue_t v);



#ifdef MATTE_DEBUG__HEAP 

matteValue_t matte_heap_track_in(matteHeap_t *, matteValue_t, const char *, int);
void matte_heap_track_out(matteHeap_t *, matteValue_t, const char *, int);
void matte_heap_track_neutral(matteHeap_t *, matteValue_t, const char *, int);

// prints a report of the heap if any references have not 
// 
int matte_heap_report(matteHeap_t *);
void matte_heap_recycle_(matteHeap_t *, matteValue_t, const char *, int line);



#define matte_heap_new_value(__HEAP__) matte_heap_track_in(__HEAP__, matte_heap_new_value_(__HEAP__), __FILE__, __LINE__)
#define matte_value_into_empty(__HEAP__, __VAL__)  (matte_value_into_empty_(__HEAP__, __VAL__)); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_number(__HEAP__, __VAL__, __NUM__) matte_value_into_number_(__HEAP__, __VAL__, __NUM__); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_boolean(__HEAP__, __VAL__, __MBOOL__) matte_value_into_boolean_(__HEAP__, __VAL__, __MBOOL__); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_string(__HEAP__, __VAL__, __MSTRING__) matte_value_into_string_(__HEAP__, __VAL__, __MSTRING__); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_object_ref(__HEAP__, __VAL__) matte_value_into_new_object_ref_(__HEAP__, __VAL__); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_object_ref_typed(__HEAP__, __VAL__, __MTYPE__) matte_value_into_new_object_ref_typed_(__HEAP__, __VAL__, __MTYPE__); matte_heap_track_in(__HEAP__,  *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_type(__HEAP__, __VAL__, __MOPTS__, __MOPTS2__)  matte_value_into_new_type_(__HEAP__, __VAL__, __MOPTS__, __MOPTS2__); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_object_literal_ref(__HEAP__, __VAL__, __MARR__) matte_value_into_new_object_literal_ref_(__HEAP__, __VAL__, __MARR__); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_object_array_ref(__HEAP__, __VAL__, __MARR__) matte_value_into_new_object_array_ref_(__HEAP__, __VAL__, __MARR__); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_function_ref(__HEAP__, __VAL__, __MSTUB__) matte_value_into_new_function_ref_(__HEAP__, __VAL__, __MSTUB__); matte_heap_track_in(__HEAP__, *(__VAL__), __FILE__, __LINE__);
// already inc by matte_value_into_new_function
#define matte_value_into_new_typed_function_ref(__HEAP__, __VAL__, __MSTUB__, __MARR0__) matte_value_into_new_typed_function_ref_(__HEAP__, __VAL__, __MSTUB__, __MARR0__); matte_heap_track_neutral(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_copy(__HEAP__, __VAL__, __OTHER__) matte_value_into_copy_(__HEAP__, __VAL__, __OTHER__);matte_heap_track_neutral(__HEAP__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_object_push_lock(__HEAP__, __VAL__) matte_value_object_push_lock_(__HEAP__, __VAL__); if ((__VAL__).binID == MATTE_VALUE_TYPE_OBJECT||(__VAL__).binID == MATTE_VALUE_TYPE_FUNCTION) matte_heap_track_in(__HEAP__, (__VAL__), __FILE__, __LINE__);
#define matte_value_object_pop_lock(__HEAP__, __VAL__) matte_value_object_pop_lock_(__HEAP__, __VAL__); if ((__VAL__).binID == MATTE_VALUE_TYPE_OBJECT||(__VAL__).binID == MATTE_VALUE_TYPE_FUNCTION) matte_heap_track_out(__HEAP__, (__VAL__), __FILE__, __LINE__);
#define matte_heap_recycle(__HEAP__, __VAL__) matte_heap_recycle_(__HEAP__, __VAL__, __FILE__, __LINE__); 
#else 
void matte_heap_recycle_(matteHeap_t *, matteValue_t);

#define matte_heap_new_value(__HEAP__) matte_heap_new_value_(__HEAP__)
#define matte_value_into_empty(__HEAP__, __VAL__) matte_value_into_empty_(__HEAP__, __VAL__)
#define matte_value_into_number(__HEAP__, __VAL__, __NUM__) matte_value_into_number_(__HEAP__, __VAL__, __NUM__)
#define matte_value_into_boolean(__HEAP__, __VAL__, __MBOOL__) matte_value_into_boolean_(__HEAP__, __VAL__, __MBOOL__)
#define matte_value_into_string(__HEAP__, __VAL__, __MSTRING__) matte_value_into_string_(__HEAP__, __VAL__, __MSTRING__)
#define matte_value_into_new_object_ref(__HEAP__, __VAL__) matte_value_into_new_object_ref_(__HEAP__, __VAL__)
#define matte_value_into_new_object_ref_typed(__HEAP__, __VAL__, __MTYPE__) matte_value_into_new_object_ref_typed_(__HEAP__, __VAL__, __MTYPE__)
#define matte_value_into_new_type(__HEAP__, __VAL__, __MOPTS__, __MOPTS2__) matte_value_into_new_type_(__HEAP__, __VAL__, __MOPTS__, __MOPTS2__)
#define matte_value_into_new_object_literal_ref(__HEAP__, __VAL__, __MARR__) matte_value_into_new_object_literal_ref_(__HEAP__, __VAL__, __MARR__)
#define matte_value_into_new_object_array_ref(__HEAP__, __VAL__, __MARR__) matte_value_into_new_object_array_ref_(__HEAP__, __VAL__, __MARR__)
#define matte_value_into_new_function_ref(__HEAP__, __VAL__, __MSTUB__) matte_value_into_new_function_ref_(__HEAP__, __VAL__, __MSTUB__); 
#define matte_value_into_new_typed_function_ref(__HEAP__, __VAL__, __MSTUB__, __MARR0__) matte_value_into_new_typed_function_ref_(__HEAP__, __VAL__, __MSTUB__, __MARR0__);
#define matte_value_into_copy(__HEAP__, __VAL__, __OTHER__) matte_value_into_copy_(__HEAP__, __VAL__, __OTHER__); 
#define matte_value_object_push_lock(__HEAP__, __VAL__) matte_value_object_push_lock_(__HEAP__, __VAL__);
#define matte_value_object_pop_lock(__HEAP__, __VAL__) matte_value_object_pop_lock_(__HEAP__, __VAL__);
#define matte_heap_recycle(__HEAP__, __VAL__); matte_heap_recycle_(__HEAP__, __VAL__)
#endif
