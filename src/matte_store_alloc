/*
Copyright (c) 2023, Johnathan Corkery. (jcorkery@umich.edu)
All rights reserved.

This file is part of the Matte project (https://github.com/jcorks/matte)
matte was released under the MIT License, as detailed below.



Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is furnished 
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.


*/
// heaps facilitate tracking of references
// In store debug mode, each reference is has its calling location tracked

matteValue_t matte_store_new_value_(matteStore_t *);
void matte_value_into_empty_(matteStore_t *, matteValue_t *);
void matte_value_into_number_(matteStore_t *, matteValue_t *, double);
void matte_value_into_boolean_(matteStore_t *, matteValue_t *, int);
void matte_value_into_string_(matteStore_t *, matteValue_t *, const matteString_t *);
void matte_value_into_new_object_ref_(matteStore_t *, matteValue_t *);
void matte_value_into_new_object_ref_typed_(matteStore_t *, matteValue_t *, matteValue_t type);
void matte_value_into_new_object_literal_ref_(matteStore_t *, matteValue_t *, const matteArray_t *);
void matte_value_into_new_object_array_ref_(matteStore_t *, matteValue_t * v, const matteArray_t *);
void matte_value_into_new_function_ref_(matteStore_t *, matteValue_t *, matteBytecodeStub_t *);
void matte_value_into_cloned_function_ref_(matteStore_t *, matteValue_t *, matteValue_t);
void matte_value_into_new_typed_function_ref_(matteStore_t *, matteValue_t *, matteBytecodeStub_t * stub, const matteArray_t * args);
void matte_value_into_copy_(matteStore_t *, matteValue_t *, matteValue_t from);
void matte_value_object_push_lock_(matteStore_t *, matteValue_t v);
void matte_value_object_pop_lock_(matteStore_t *, matteValue_t v);

matteValue_t matte_value_create_type_(matteStore_t *, matteValue_t name, matteValue_t inherits, matteValue_t layout);


#ifdef MATTE_DEBUG__STORE 

matteValue_t matte_store_track_in(matteStore_t *, matteValue_t, const char *, int);
void matte_store_track_out(matteStore_t *, matteValue_t, const char *, int);
matteValue_t matte_store_track_in_lock(matteStore_t *, matteValue_t, const char *, int);
void matte_store_track_out_lock(matteStore_t *, matteValue_t, const char *, int);

void matte_store_track_neutral(matteStore_t *, matteValue_t, const char *, int);

// prints a report of the store if any references have not 
// 
int matte_store_report(matteStore_t *);
void matte_store_recycle_(matteStore_t *, matteValue_t, const char *, int line);
void matte_store_track_done(matteStore_t * store, matteValue_t val);



#define matte_store_new_value(__STORE__) matte_store_track_in(__STORE__, matte_store_new_value_(__STORE__), __FILE__, __LINE__)
#define matte_value_into_empty(__STORE__, __VAL__)  (matte_value_into_empty_(__STORE__, __VAL__)); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_number(__STORE__, __VAL__, __NUM__) matte_value_into_number_(__STORE__, __VAL__, __NUM__); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_boolean(__STORE__, __VAL__, __MBOOL__) matte_value_into_boolean_(__STORE__, __VAL__, __MBOOL__); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_string(__STORE__, __VAL__, __MSTRING__) matte_value_into_string_(__STORE__, __VAL__, __MSTRING__); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_object_ref(__STORE__, __VAL__) matte_value_into_new_object_ref_(__STORE__, __VAL__); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_object_ref_typed(__STORE__, __VAL__, __MTYPE__) matte_value_into_new_object_ref_typed_(__STORE__, __VAL__, __MTYPE__); matte_store_track_in(__STORE__,  *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_object_literal_ref(__STORE__, __VAL__, __MARR__) matte_value_into_new_object_literal_ref_(__STORE__, __VAL__, __MARR__); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_object_array_ref(__STORE__, __VAL__, __MARR__) matte_value_into_new_object_array_ref_(__STORE__, __VAL__, __MARR__); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_new_function_ref(__STORE__, __VAL__, __MSTUB__) matte_value_into_new_function_ref_(__STORE__, __VAL__, __MSTUB__); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_cloned_function_ref(__STORE__, __VAL__, __MSTUB__) matte_value_into_cloned_function_ref_(__STORE__, __VAL__, __MSTUB__); matte_store_track_in(__STORE__, *(__VAL__), __FILE__, __LINE__);


#define matte_value_create_type(__STORE__, __MOPTS__, __MOPTS2__, __MOPTSLYT__)  matte_store_track_in(__STORE__, matte_value_create_type_(__STORE__, __MOPTS__, __MOPTS2__, __MOPTSLYT__), __FILE__, __LINE__);


// already inc by matte_value_into_new_function
#define matte_value_into_new_typed_function_ref(__STORE__, __VAL__, __MSTUB__, __MARR0__) matte_value_into_new_typed_function_ref_(__STORE__, __VAL__, __MSTUB__, __MARR0__); matte_store_track_neutral(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_into_copy(__STORE__, __VAL__, __OTHER__) matte_value_into_copy_(__STORE__, __VAL__, __OTHER__);matte_store_track_neutral(__STORE__, *(__VAL__), __FILE__, __LINE__);
#define matte_value_object_push_lock(__STORE__, __VAL__) matte_value_object_push_lock_(__STORE__, __VAL__); if (matte_value_type(__VAL__) == MATTE_VALUE_TYPE_OBJECT) matte_store_track_in_lock(__STORE__, (__VAL__), __FILE__, __LINE__);
#define matte_value_object_pop_lock(__STORE__, __VAL__) matte_value_object_pop_lock_(__STORE__, __VAL__); if (matte_value_type(__VAL__) == MATTE_VALUE_TYPE_OBJECT) matte_store_track_out_lock(__STORE__, (__VAL__), __FILE__, __LINE__);
#define matte_store_recycle(__STORE__, __VAL__) matte_store_recycle_(__STORE__, __VAL__, __FILE__, __LINE__); 
#else 
void matte_store_recycle_(matteStore_t *, matteValue_t);

#define matte_store_new_value(__STORE__) matte_store_new_value_(__STORE__)
#define matte_value_into_empty(__STORE__, __VAL__) matte_value_into_empty_(__STORE__, __VAL__)
#define matte_value_into_number(__STORE__, __VAL__, __NUM__) matte_value_into_number_(__STORE__, __VAL__, __NUM__)
#define matte_value_into_boolean(__STORE__, __VAL__, __MBOOL__) matte_value_into_boolean_(__STORE__, __VAL__, __MBOOL__)
#define matte_value_into_string(__STORE__, __VAL__, __MSTRING__) matte_value_into_string_(__STORE__, __VAL__, __MSTRING__)
#define matte_value_into_new_object_ref(__STORE__, __VAL__) matte_value_into_new_object_ref_(__STORE__, __VAL__)
#define matte_value_into_new_object_ref_typed(__STORE__, __VAL__, __MTYPE__) matte_value_into_new_object_ref_typed_(__STORE__, __VAL__, __MTYPE__)
#define matte_value_into_new_object_literal_ref(__STORE__, __VAL__, __MARR__) matte_value_into_new_object_literal_ref_(__STORE__, __VAL__, __MARR__)
#define matte_value_into_new_object_array_ref(__STORE__, __VAL__, __MARR__) matte_value_into_new_object_array_ref_(__STORE__, __VAL__, __MARR__)
#define matte_value_into_new_function_ref(__STORE__, __VAL__, __MSTUB__) matte_value_into_new_function_ref_(__STORE__, __VAL__, __MSTUB__)
#define matte_value_into_cloned_function_ref(__STORE__, __VAL__, __MSTUB__) matte_value_into_cloned_function_ref_(__STORE__, __VAL__, __MSTUB__)
#define matte_value_into_new_typed_function_ref(__STORE__, __VAL__, __MSTUB__, __MARR0__) matte_value_into_new_typed_function_ref_(__STORE__, __VAL__, __MSTUB__, __MARR0__)
#define matte_value_into_copy(__STORE__, __VAL__, __OTHER__) matte_value_into_copy_(__STORE__, __VAL__, __OTHER__)
#define matte_value_object_push_lock(__STORE__, __VAL__) matte_value_object_push_lock_(__STORE__, __VAL__)
#define matte_value_object_pop_lock(__STORE__, __VAL__) matte_value_object_pop_lock_(__STORE__, __VAL__)
#define matte_store_recycle(__STORE__, __VAL__) (__STORE__),(__VAL__)
#define matte_value_create_type(__STORE__, __MOPTS__, __MOPTS2__, __MOPTSLYT__) matte_value_create_type_(__STORE__, __MOPTS__, __MOPTS2__, __MOPTSLYT__)

#endif

void matte_value_into_new_external_function_ref(matteStore_t * store, matteValue_t * v, matteBytecodeStub_t * stub);

