#include <math.h>

// return operator function for operator if it exists.
static matteValue_t object_get_operator(matteValue_t a, const char * operator) {
    matteValue_t result = matte_heap_new_value(a.heap);
    matteValue_t opSrc = matte_value_object_access_string(a, MATTE_STR_CAST("operator"));
    if (opSrc.binID) {
        result = matte_value_object_access_string(a, MATTE_STR_CAST(operator));
    }
    matte_heap_recycle(opSrc);
    return result;
}

static int object_has_operator(matteValue_t a, const char * operator) {
    matteValue_t opSrc = matte_value_object_access_string(a, MATTE_STR_CAST("operator"));
    matteValue_t result;
    if (!opSrc.binID) {
        return 0;
    }
    result = matte_value_object_access_string(a, MATTE_STR_CAST(operator));
    int r = result.binID != 0;
    matte_heap_recycle(opSrc);
    matte_heap_recycle(result);
    return r;  
}

static matteValue_t vm_run_object_operator_2(matteVM_t * vm, matteValue_t a, const char * operator, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(a.heap);
    matteValue_t opSrc = matte_value_object_access_string(a, MATTE_STR_CAST("operator"));
    if (opSrc.binID) {
        matteValue_t op = matte_value_object_access_string(a, MATTE_STR_CAST(operator));
        
        matteValue_t args[] = {a, b};
        result = matte_vm_call(vm, op, MATTE_ARRAY_CAST(args, matteValue_t, 2));
        matte_heap_recycle(op);
    } else {
        matteString_t * err = matte_string_create_from_c_str("%s operator to object without operator overloading is undefined.", operator);
        matte_vm_raise_error_string(vm, err);
        matte_string_destroy(err);
    }
    matte_heap_recycle(opSrc);
    return result;
}


static matteValue_t vm_run_object_operator_1(matteVM_t * vm, matteValue_t a, const char * operator) {
    matteValue_t result = matte_heap_new_value(a.heap);
    matteValue_t opSrc = matte_value_object_access_string(a, MATTE_STR_CAST("operator"));
    if (opSrc.binID) {
        matteValue_t op = matte_value_object_access_string(a, MATTE_STR_CAST(operator));
        
        matteValue_t args[] = {a};
        result = matte_vm_call(vm, op, MATTE_ARRAY_CAST(args, matteValue_t, 1));
        matte_heap_recycle(op);
    } else {
        matteString_t * err = matte_string_create_from_c_str("%s operator to object without operator overloading is undefined.", operator);
        matte_vm_raise_error_string(vm, err);
        matte_string_destroy(err);
    }
    matte_heap_recycle(opSrc);
    return result;
}

// +
static matteValue_t vm_operator__add(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("+ operator to empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(
            &result, 
            matte_value_as_number(a) +
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matteString_t * astr = matte_value_as_string(a);
        matteString_t * bstr = matte_value_as_string(b);
        if (!astr || !bstr) {
            if (astr) matte_string_destroy(astr);
            if (bstr) matte_string_destroy(bstr);
            return result; 
        }
        
        matteString_t * str = matte_string_clone(astr);
        matte_string_concat(str, bstr);
        
        matte_value_into_string(
            &result, 
            str
        );
        matte_string_destroy(astr);
        matte_string_destroy(bstr);
        
        matte_string_destroy(str);
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("+ operator to boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {

        result = vm_run_object_operator_2(vm, a, "+", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__sub(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("- operator to empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(
            &result, 
            matte_value_as_number(a) -
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("- operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("- operator to boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "-", b);
        break;
      }      
    }
    return result;
}



static matteValue_t vm_operator__div(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("/ operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(
            &result, 
            matte_value_as_number(a) /
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("/ operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("/ operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "/", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__mult(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("* operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(
            &result, 
            matte_value_as_number(a) *
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("* operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("* operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "*", b);
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__not(matteVM_t * vm, matteValue_t a) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("! operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("! operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("! operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(
            &result, 
            !matte_value_as_boolean(a)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_1(vm, a, "!");
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__bitwise_not(matteVM_t * vm, matteValue_t a) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("~ operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("~ operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("~ operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("~ operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_1(vm, a, "~");
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__bitwise_or(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("| operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("| operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("| operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_boolean(a) |
            matte_value_as_boolean(b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "|", b);
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__or(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("|| operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("|| operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("|| operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_boolean(a) ||
            matte_value_as_boolean(b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "||", b);
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__bitwise_and(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("& operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("& operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("& operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_boolean(a) &
            matte_value_as_boolean(b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "&", b);
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__and(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("&& operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("&& operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("&& operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_boolean(a) &&
            matte_value_as_boolean(b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "&&", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__shift_left(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<< operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<< operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<< operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<< operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "<<", b);
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__shift_right(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(">> operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(">> operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(">> operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(">> operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, ">>", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__pow(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("** operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(
            &result, 
            pow(matte_value_as_number(a),
                matte_value_as_number(b))
        );
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("** operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("** operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "**", b);
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__eq(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_value_into_boolean(&result, b.binID == 0);
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_number(a) ==
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        const matteString_t * astr = matte_value_string_get_string_unsafe(a);
        //TODO: fastpath for 2 strings?
        matteString_t * bstr = matte_value_as_string(b);
        if (!bstr) return result;
        
        matte_value_into_boolean(
            &result,
            matte_string_test_eq(
                astr,
                bstr
            )
        );
        matte_string_destroy(bstr);
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_boolean(a) ==
            matte_value_as_boolean(b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        if (object_has_operator(a, "==")) {
            result = vm_run_object_operator_2(vm, a, "==", b);
        } else {
            if (b.binID == 0) {
                // if we're here, we know a is not empty, so this will always be false
                matte_value_into_boolean(
                    &result, 
                    0
                );
            } else if (b.binID == MATTE_VALUE_TYPE_OBJECT) {
                matte_value_into_boolean(
                    &result, 
                    a.objectID == b.objectID
                );
            } else {
                // not defined.
                matte_vm_raise_error_string(vm, MATTE_STR_CAST("== operator with object and non-empty or non-object values is undefined."));

            }
        }
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__noteq(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_value_into_boolean(&result, b.binID != 0);
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_number(a) !=
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        const matteString_t * astr = matte_value_string_get_string_unsafe(a);
        //TODO: fastpath for 2 strings?
        matteString_t * bstr = matte_value_as_string(b);
        if (!bstr) return result;
        
        matte_value_into_boolean(
            &result,
            !matte_string_test_eq(
                astr,
                bstr
            )
        );
        matte_string_destroy(bstr);
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_boolean(a) !=
            matte_value_as_boolean(b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        if (object_has_operator(a, "!=")) {
            result = vm_run_object_operator_2(vm, a, "!=", b);
        } else {
            if (b.binID == 0) {
                // if we're here, we know a is not empty, so this will always be false
                matte_value_into_boolean(
                    &result, 
                    1
                );
            } else if (b.binID == MATTE_VALUE_TYPE_OBJECT) {
                matte_value_into_boolean(
                    &result, 
                    a.objectID != b.objectID
                );
            } else {
                // not defined.
                matte_vm_raise_error_string(vm, MATTE_STR_CAST("!= operator with object and non-empty or non-object values is undefined."));

            }
        }
        break;
      }      
    }
    return result;
}



static matteValue_t vm_operator__less(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("< operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_number(a) <
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matteString_t * astr = matte_value_as_string(a);
        matteString_t * bstr = matte_value_as_string(b);
        if (!astr || !bstr) return result;
        
        matte_value_into_boolean(
            &result,
            matte_string_compare(
                astr,
                bstr
            ) < 0
        );
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("< operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "<", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__greater(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("> operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_number(a) >
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matteString_t * astr = matte_value_as_string(a);
        matteString_t * bstr = matte_value_as_string(b);
        if (!astr || !bstr) return result;
        
        matte_value_into_boolean(
            &result,
            matte_string_compare(
                astr,
                bstr
            ) > 0
        );
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("> operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, ">", b);
        break;
      }      
    }
    return result;
}



static matteValue_t vm_operator__lesseq(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<= operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_number(a) <=
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        const matteString_t * astr = matte_value_string_get_string_unsafe(a);
        //TODO: fastpath for 2 strings?
        matteString_t * bstr = matte_value_as_string(b);
        if (!bstr) return result;
        
        matte_value_into_boolean(
            &result,
            !matte_string_compare(
                astr,
                bstr
            ) <= 0
        );
        matte_string_destroy(bstr);
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<= operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "<=", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__greatereq(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(">= operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(
            &result, 
            matte_value_as_number(a) >=
            matte_value_as_number(b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matteString_t * astr = matte_value_as_string(a);
        matteString_t * bstr = matte_value_as_string(b);
        if (!astr || !bstr) return result;
        
        matte_value_into_boolean(
            &result,
            matte_string_compare(
                astr,
                bstr
            ) >= 0
        );
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(">= operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, ">=", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__point(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("-> operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("-> operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("-> operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("-> operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "->", b);
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__pound(matteVM_t * vm, matteValue_t a) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("# operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("# operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("# operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("# operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_1(vm, a, "#");
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__ternary(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("? operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("? operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("? operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("? operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "?", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__token(matteVM_t * vm, matteValue_t a) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("$ operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("$ operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("$ operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("$ operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_1(vm, a, "$");
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__specify(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(":: operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(":: operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(":: operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST(":: operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "::", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__transform(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<> operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<> operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<> operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("<> operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "<>", b);
        break;
      }      
    }
    return result;
}



static matteValue_t vm_operator__modulo(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("% operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(
            &result, 
            fmod(matte_value_as_number(a),
                 matte_value_as_number(b))
        );
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("% operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("% operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "%", b);
        break;
      }      
    }
    return result;
}


static matteValue_t vm_operator__caret(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_heap_new_value(vm->heap);
    switch(a.binID) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("^ operator on empty value is undefined."));
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("^ operator on number value is undefined."));
        break;

      case MATTE_VALUE_TYPE_STRING: { 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("^ operator on string value is undefined."));
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_vm_raise_error_string(vm, MATTE_STR_CAST("^ operator on boolean value is undefined."));
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "^", b);
        break;
      }      
    }
    return result;
}
