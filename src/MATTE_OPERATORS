/*
Copyright (c) 2023, Johnathan Corkery. (jcorkery@umich.edu)
All rights reserved.

This file is part of the Matte project (https://github.com/jcorks/matte)
matte was released under the MIT License, as detailed below.



Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is furnished 
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.


*/
#include <math.h>



static int object_has_operator(matteVM_t * vm, matteValue_t a, const char * operator_) {
    const matteValue_t * opSrc = matte_value_object_get_attributes_unsafe(vm->store, a);
    matteValue_t result;
    if (!opSrc) {
        return 0;
    }
    matteString_t * opstr = matte_string_create_from_c_str("%s", operator_);
    result = matte_value_object_access_string(vm->store, *opSrc, opstr);
    matte_string_destroy(opstr);
    int r = result.binIDreserved != 0;
    matte_store_recycle(vm->store, result);
    return r;  
}

static matteValue_t vm_run_object_operator_2(matteVM_t * vm, matteValue_t a, const char * operator_, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    if (matte_value_is_function(a)) {
        matteString_t * err = matte_string_create_from_c_str("%s operator on a Function is undefined.", operator_);
        matte_vm_raise_error_string(vm, err);
        matte_string_destroy(err);
        return result;    
    }
    const matteValue_t * opSrc = matte_value_object_get_attributes_unsafe(vm->store, a);
    matteString_t * opstr = matte_string_create_from_c_str("%s", operator_);
    if (opSrc) {
        matteValue_t op = matte_value_object_access_string(vm->store, *opSrc, opstr);
        matteArray_t arr = MATTE_ARRAY_CAST(&b, matteValue_t, 1);
        matteArray_t arrNames = MATTE_ARRAY_CAST(&vm->specialString_value, matteValue_t, 1);
        result = matte_vm_call(vm, op, &arr, &arrNames, opstr);
        matte_store_recycle(vm->store, op);
    } else {
        matteString_t * err = matte_string_create_from_c_str("%s operator on object without operator overloading is undefined.", operator_);
        matte_vm_raise_error_string(vm, err);
        matte_string_destroy(err);
    }
    matte_string_destroy(opstr);
    return result;
}


static matteValue_t vm_run_object_operator_1(matteVM_t * vm, matteValue_t a, const char * operator_) {
    matteValue_t result = matte_store_new_value(vm->store);
    if (matte_value_is_function(a)) {
        matteString_t * err = matte_string_create_from_c_str("%s operator on a Function is undefined.", operator_);
        matte_vm_raise_error_string(vm, err);
        matte_string_destroy(err);
        return result;    
    }

    const matteValue_t * opSrc = matte_value_object_get_attributes_unsafe(vm->store, a);
    matteString_t * opstr = matte_string_create_from_c_str("%s", operator_);
    if (opSrc) {
        matteValue_t op = matte_value_object_access_string(vm->store, *opSrc, opstr);
        
        result = matte_vm_call(vm, op, matte_array_empty(), matte_array_empty(), opstr);
        matte_store_recycle(vm->store, op);
    } else {
        matteString_t * err = matte_string_create_from_c_str("%s operator on object without operator overloading is undefined.", operator_);
        matte_vm_raise_error_string(vm, err);
        matte_string_destroy(err);
    }
    matte_string_destroy(opstr);
    return result;
}

static void bad_operator(
    matteVM_t * vm,    
    const char * operator_, 
    matteValue_t obj
) {
    matteString_t * errMessage = matte_string_create_from_c_str("%s", operator_);
    matte_string_concat_printf(errMessage, "%s", " operator on value of type ");
    matte_string_concat(errMessage, matte_value_string_get_string_unsafe(vm->store, matte_value_type_name(vm->store, matte_value_get_type(vm->store, obj))));
    matte_string_concat_printf(errMessage, "%s", " is undefined.");
    matte_vm_raise_error_string(vm, errMessage);
    matte_string_destroy(errMessage);
}

// +
static matteValue_t vm_operator__add(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
        
        
        

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) +
            matte_value_as_number(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        const matteString_t * astr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, a));
        const matteString_t * bstr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, b));
        
        matteString_t * str = matte_string_clone(astr);
        matte_string_concat(str, bstr);
        
        matte_value_into_string(vm->store, 
            &result, 
            str
        );
        
        matte_string_destroy(str);
        break;
      }


      
      case MATTE_VALUE_TYPE_OBJECT: {

        result = vm_run_object_operator_2(vm, a, "+", b);
        break;
      }      
      
      default: 
        bad_operator(vm, "+", a);
        break;
      
    }
    return result;
}


static matteValue_t vm_operator__sub(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) -
            matte_value_as_number(vm->store, b)
        );
        break;

      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "-", b);
        break;
      }      

      default: 
        bad_operator(vm, "-", a);
        break;

    }
    return result;
}



static matteValue_t vm_operator__div(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) /
            matte_value_as_number(vm->store, b)
        );
        break;


      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "/", b);
        break;
      }      

      default: 
        bad_operator(vm, "/", a);
        break;


    }
    return result;
}


static matteValue_t vm_operator__mult(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) *
            matte_value_as_number(vm->store, b)
        );
        break;

      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "*", b);
        break;
      }      

      default: 
        bad_operator(vm, "*", a);
        break;

    }
    return result;
}

static matteValue_t vm_operator__not(matteVM_t * vm, matteValue_t a) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            &result, 
            !matte_value_as_boolean(vm->store, a)
        );
        break;

      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_1(vm, a, "!");
        break;
      }      

      default: 
        bad_operator(vm, "!", a);
        break;


    }
    return result;
}

static matteValue_t vm_operator__negate(matteVM_t * vm, matteValue_t a) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            &result, 
            -matte_value_as_number(vm->store, a)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_1(vm, a, "-()");
        break;
      }      

      default: 
        bad_operator(vm, "-()", a);
        break;
    }
    return result;
}


static matteValue_t vm_operator__bitwise_not(matteVM_t * vm, matteValue_t a) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_NUMBER: {
        matte_value_into_number(vm->store, 
            &result, 
            ~((int32_t)matte_value_as_number(vm->store, a))
        );
        break;
      }      

      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_1(vm, a, "~");
        break;
      }      
      
      default: 
        bad_operator(vm, "~", a);
        break;

    }
    return result;
}

static matteValue_t vm_operator__bitwise_or(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_boolean(vm->store, a) |
            matte_value_as_boolean(vm->store, b)
        );
        break;

      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            &result, 
            ((int32_t)matte_value_as_number(vm->store, a)) |
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;
        
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "|", b);
        break;
      }      

      default: 
        bad_operator(vm, "|", a);
        break;

    }
    return result;
}

static matteValue_t vm_operator__or(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_boolean(vm->store, a) ||
            matte_value_as_boolean(vm->store, b)
        );
        break;
      
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "||", b);
        break;
      }      

      default: 
        bad_operator(vm, "||", a);
        break;

    }
    return result;
}

static matteValue_t vm_operator__bitwise_and(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_boolean(vm->store, a) &
            matte_value_as_boolean(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            &result, 
            ((int32_t)matte_value_as_number(vm->store, a)) &
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;


      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "&", b);
        break;
      }      

      default: 
        bad_operator(vm, "&", a);
        break;

    }
    return result;
}

static matteValue_t vm_operator__and(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_BOOLEAN: {
        int vb = matte_value_as_boolean(vm->store, a);
        // short circuit
        if (!vb) {
            matte_value_into_boolean(vm->store, 
                &result, 
                0
            );
        }        
        matte_value_into_boolean(vm->store, 
            &result, 
            vb &&
            matte_value_as_boolean(vm->store, b)
        );
        break;

      }
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "&&", b);
        break;
      }      

      default: 
        bad_operator(vm, "&&", a);
        break;


    }
    return result;
}

static matteValue_t vm_operator__overload_only_2(
    matteVM_t * vm, 
    const char * operator_,
    matteValue_t a, 
    matteValue_t b
) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, operator_, b);
        break;
      }      
      
      default: 
        bad_operator(vm, operator_, a);
        break;

    }
    return result;
}

static matteValue_t vm_operator__overload_only_1(
    matteVM_t * vm, 
    const char * operator_,
    matteValue_t a
) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_1(vm, a, operator_);
        break;
      }      
      
      default: 
        bad_operator(vm, operator_, a);
        break;

    }
    return result;
}





static matteValue_t vm_operator__pow(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            &result, 
            pow(matte_value_as_number(vm->store, a),
                matte_value_as_number(vm->store, b))
        );
        break;


      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "**", b);
        break;
      }      

      default: 
        bad_operator(vm, "**", a);
        break;
    }
    return result;
}

static matteValue_t vm_operator__eq(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    if (matte_value_type(b) == MATTE_VALUE_TYPE_EMPTY && matte_value_type(a) != MATTE_VALUE_TYPE_EMPTY) {
        matte_value_into_boolean(vm->store, &result, 0);
        return result;
    }
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_value_into_boolean(vm->store, &result, matte_value_type(b) == 0);
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) ==
            matte_value_as_number(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matte_value_into_boolean(vm->store, 
            &result,
            a.value.id == matte_value_as_string(vm->store, b).value.id
        );
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_boolean(vm->store, a) ==
            matte_value_as_boolean(vm->store, b)
        );
        break;


      case MATTE_VALUE_TYPE_OBJECT: {
        if (object_has_operator(vm, a, "==")) {
            result = vm_run_object_operator_2(vm, a, "==", b);
        } else {
            if (matte_value_type(b) == 0) {
                // if we're here, we know a is not empty, so this will always be false
                matte_value_into_boolean(vm->store, 
                    &result, 
                    0
                );
            } else if (matte_value_type(b) == MATTE_VALUE_TYPE_OBJECT) {
                matte_value_into_boolean(vm->store, 
                    &result, 
                    a.value.id == b.value.id
                );
            } else {
                // not defined.
                matte_vm_raise_error_cstring(vm, "== operator with object and non-empty or non-object values is undefined.");

            }
        }
        break;
      }
      case MATTE_VALUE_TYPE_TYPE: {
        if (matte_value_type(b) == MATTE_VALUE_TYPE_TYPE) {
            matte_value_into_boolean(vm->store, 
                &result, 
                a.value.id == b.value.id 
            );
        } else {            
            matte_vm_raise_error_cstring(vm, "== operator with Type and non-type is undefined.");            
        }
        break;
      }      
    }
    return result;
}

static matteValue_t vm_operator__noteq(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    if (matte_value_type(b) == MATTE_VALUE_TYPE_EMPTY && matte_value_type(a) != MATTE_VALUE_TYPE_EMPTY) {
        matte_value_into_boolean(vm->store, &result, 1);
        return result;
    }

    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_EMPTY: 
        matte_value_into_boolean(vm->store, &result, matte_value_type(b) != 0);
        return result;

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) !=
            matte_value_as_number(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        matte_value_into_boolean(vm->store, 
            &result,
            a.value.id != matte_value_as_string(vm->store, b).value.id
        );
        break;
      }
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_boolean(vm->store, a) !=
            matte_value_as_boolean(vm->store, b)
        );
        break;
      
      
      case MATTE_VALUE_TYPE_OBJECT: {
        if (object_has_operator(vm, a, "!=")) {
            result = vm_run_object_operator_2(vm, a, "!=", b);
        } else {
            if (matte_value_type(b) == 0) {
                // if we're here, we know a is not empty, so this will always be false
                matte_value_into_boolean(vm->store, 
                    &result, 
                    1
                );
            } else if (matte_value_type(b) == MATTE_VALUE_TYPE_OBJECT) {
                matte_value_into_boolean(vm->store, 
                    &result, 
                    a.value.id != b.value.id
                );
            } else {
                // not defined.
                matte_vm_raise_error_cstring(vm, "!= operator with object and non-empty or non-object values is undefined.");

            }
        }

        break;
      } 
      case MATTE_VALUE_TYPE_TYPE: {
        if (matte_value_type(b) == MATTE_VALUE_TYPE_TYPE) {
            matte_value_into_boolean(vm->store, 
                &result, 
                a.value.id != b.value.id 
            );
        } else {
            
            matte_vm_raise_error_cstring(vm, "!= operator with Type and non-type is undefined.");            
        }
        break;
      }      
     
    }
    return result;
}



static matteValue_t vm_operator__less(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) <
            matte_value_as_number(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        const matteString_t * astr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, a));
        const matteString_t * bstr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, b));
        if (!astr || !bstr) return result;
        
        matte_value_into_boolean(vm->store, 
            &result,
            matte_string_compare(
                astr,
                bstr
            ) < 0
        );
        break;
      }


      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "<", b);
        break;
      }      

      default: 
        bad_operator(vm, "<", a);
        break;
    }
    return result;
}


static matteValue_t vm_operator__greater(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) >
            matte_value_as_number(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        const matteString_t * astr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, a));
        const matteString_t * bstr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, b));
        if (!astr || !bstr) return result;
        
        matte_value_into_boolean(vm->store, 
            &result,
            matte_string_compare(
                astr,
                bstr
            ) > 0
        );
        break;
      }
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, ">", b);
        break;
      }      

      default: 
        bad_operator(vm, ">", a);
        break;

    }
    return result;
}



static matteValue_t vm_operator__lesseq(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) <=
            matte_value_as_number(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        const matteString_t * astr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, a));
        const matteString_t * bstr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, b));
        if (!astr || !bstr) return result;
        
        matte_value_into_boolean(vm->store, 
            &result,
            matte_string_compare(
                astr,
                bstr
            ) <= 0
        );       
        break;
      }
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "<=", b);
        break;
      }      
      default: 
        bad_operator(vm, "<=", a);
        break;

    }
    return result;
}


static matteValue_t vm_operator__greatereq(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_number(vm->store, a) >=
            matte_value_as_number(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_STRING: { 
        const matteString_t * astr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, a));
        const matteString_t * bstr = matte_value_string_get_string_unsafe(vm->store, matte_value_as_string(vm->store, b));
        if (!astr || !bstr) return result;
        
        matte_value_into_boolean(vm->store, 
            &result,
            matte_string_compare(
                astr,
                bstr
            ) >= 0
        );
        break;
      }
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, ">=", b);
        break;
      }      
      
      default: 
        bad_operator(vm, ">=", a);
        break;

    }
    return result;
}








static matteValue_t vm_operator__modulo(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            &result, 
            fmod(matte_value_as_number(vm->store, a),
                 matte_value_as_number(vm->store, b))
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "%", b);
        break;
      }      
      
      default: 
        bad_operator(vm, "%", a);
        break;

    }
    return result;
}

static matteValue_t vm_operator__typespec(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(b)) {
      case MATTE_VALUE_TYPE_TYPE: 
        result = a;
        
        if (!matte_value_isa(
            vm->store, 
            a, 
            b
        )) {
            matteString_t * err = matte_string_create_from_c_str(
                "Type specifier (=>) failure: expected value of type '%s', but received value of type '%s'", 
                matte_string_get_c_str(matte_value_string_get_string_unsafe(vm->store, matte_value_type_name(vm->store, b))),
                matte_string_get_c_str(matte_value_string_get_string_unsafe(vm->store, matte_value_type_name(vm->store, matte_value_get_type(vm->store, a))))
            );
            matte_vm_raise_error_string(vm, err);
        }
        break;
     
      default: 
        bad_operator(vm, "=>", a);
        break;

    }
    return result;
}




static matteValue_t vm_operator__caret(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            &result, 
            matte_value_as_boolean(vm->store, a) ^
            matte_value_as_boolean(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            &result, 
            ((int32_t)matte_value_as_number(vm->store, a)) ^
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "^", b);
        break;
      }      
      
      default: 
        bad_operator(vm, "^", a);
        break;

    }
    return result;
}



static matteValue_t vm_operator__shift_left(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            &result, 
            ((int32_t)matte_value_as_number(vm->store, a)) <<
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, "<<", b);
        break;
      }      
      
      default: 
        bad_operator(vm, "<<", a);
        break;

    }
    return result;
}


static matteValue_t vm_operator__shift_right(matteVM_t * vm, matteValue_t a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(a)) {
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            &result, 
            ((int32_t)matte_value_as_number(vm->store, a)) >>
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, a, ">>", b);
        break;
      }      
      
      default: 
        bad_operator(vm, ">>", a);
        break;

    }
    return result;
}





// +=
static matteValue_t vm_operator__assign_add(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            a, 
            matte_value_as_number(vm->store, *a) +
            matte_value_as_number(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_OBJECT: {

        result = vm_run_object_operator_2(vm, *a, "+=", b);
        break;
      }      

      default: 
        bad_operator(vm, "+=", *a);
        return result;

    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}

// -=
static matteValue_t vm_operator__assign_sub(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            a, 
            matte_value_as_number(vm->store, *a) -
            matte_value_as_number(vm->store, b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {

        result = vm_run_object_operator_2(vm, *a, "-=", b);
        break;
      }      
      default: 
        bad_operator(vm, "-=", *a);
        return result;

    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}


// /=
static matteValue_t vm_operator__assign_div(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            a, 
            matte_value_as_number(vm->store, *a) /
            matte_value_as_number(vm->store, b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, *a, "/=", b);
        break;
      }      

      default: 
        bad_operator(vm, "/=", *a);
        return result;

    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}

// *=
static matteValue_t vm_operator__assign_mult(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            a, 
            matte_value_as_number(vm->store, *a) *
            matte_value_as_number(vm->store, b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {

        result = vm_run_object_operator_2(vm, *a, "*=", b);
        break;
      }      

      default: 
        bad_operator(vm, "*=", *a);
        return result;

    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}


// %=
static matteValue_t vm_operator__assign_mod(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            a, 
            fmod(matte_value_as_number(vm->store, *a),
                 matte_value_as_number(vm->store, b))
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, *a, "%=", b);
        break;
      }      

      default: 
        bad_operator(vm, "%=", *a);
        return result;

    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}

// **=
static matteValue_t vm_operator__assign_pow(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {

      case MATTE_VALUE_TYPE_NUMBER: 
        matte_value_into_number(vm->store, 
            a, 
            matte_value_as_number(vm->store, *a) *
            matte_value_as_number(vm->store, b)
        );
        break;
      
      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, *a, "**=", b);
        break;
      }      

      default: 
        bad_operator(vm, "**=", *a);
        return result;

    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}

// &=
static matteValue_t vm_operator__assign_and(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {

      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            a, 
            matte_value_as_boolean(vm->store, *a) &
            matte_value_as_boolean(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            a, 
            ((int32_t)matte_value_as_number(vm->store, *a)) &
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;

      
      case MATTE_VALUE_TYPE_OBJECT: {

        result = vm_run_object_operator_2(vm, *a, "&=", b);
        break;
      }      
      default: 
        bad_operator(vm, "&=", *a);
        return result;


    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}


// |=
static matteValue_t vm_operator__assign_or(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {

      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            a, 
            matte_value_as_boolean(vm->store, *a) |
            matte_value_as_boolean(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            a, 
            ((int32_t)matte_value_as_number(vm->store, *a)) |
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;


      
      case MATTE_VALUE_TYPE_OBJECT: {

        result = vm_run_object_operator_2(vm, *a, "|=", b);
        break;
      }      

      default: 
        bad_operator(vm, "|=", *a);
        return result;


    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}


// ^=
static matteValue_t vm_operator__assign_xor(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {
      case MATTE_VALUE_TYPE_BOOLEAN: 
        matte_value_into_boolean(vm->store, 
            a, 
            matte_value_as_boolean(vm->store, *a) ^
            matte_value_as_boolean(vm->store, b)
        );
        break;
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            a, 
            ((int32_t)matte_value_as_number(vm->store, *a)) ^
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;

      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, *a, "^=", b);
        break;
      }      
      default: 
        bad_operator(vm, "^=", *a);
        return result;

    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}


// <<=
static matteValue_t vm_operator__assign_bleft(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            a, 
            ((int32_t)matte_value_as_number(vm->store, *a)) <<
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;


      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, *a, "<<=", b);
        break;
      }      
      default: 
        bad_operator(vm, "<<=", *a);
        return result;

    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}


// >>=
static matteValue_t vm_operator__assign_bright(matteVM_t * vm, matteValue_t * a, matteValue_t b) {
    matteValue_t result = matte_store_new_value(vm->store);
    switch(matte_value_type(*a)) {      
      case MATTE_VALUE_TYPE_NUMBER:
        matte_value_into_number(vm->store, 
            a, 
            ((int32_t)matte_value_as_number(vm->store, *a)) >>
            ((int32_t)matte_value_as_number(vm->store, b))
        );
        break;


      case MATTE_VALUE_TYPE_OBJECT: {
        result = vm_run_object_operator_2(vm, *a, ">>=", b);
        break;
      }      

      default: 
        bad_operator(vm, ">>=", *a);
        return result;
    }
    matte_value_into_copy(vm->store, &result, *a);
    return result;
}
