/*
Copyright (c) 2023, Johnathan Corkery. (jcorkery@umich.edu)
All rights reserved.

This file is part of the Matte project (https://github.com/jcorks/matte)
matte was released under the MIT License, as detailed below.



Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is furnished 
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.


*/
//
static int ensure_arg_string(matteVM_t * vm, const matteValue_t * args) {
    if (matte_value_type(args[0]) != MATTE_VALUE_TYPE_STRING) {
        matte_vm_raise_error_cstring(vm, "Built-in String function expects a value of type String to work with.");
        return 0;                
    }
    return 1;
}


static matteValue_t vm_ext_call__string__length(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    matteValue_t len = matte_store_new_value(vm->store);
    const matteString_t * strVal = matte_value_string_get_string_unsafe(vm->store, args[0]);
    matte_value_into_number(vm->store, &len, matte_string_get_length(strVal));   
    return len;     
}

static matteValue_t vm_ext_call__string__search(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    matteStore_t * store = vm->store;
    const matteString_t * str = matte_value_string_get_string_unsafe(store, args[0]);
    
    matteValue_t newlV = matte_value_as_string(store, args[1]);
    if (matte_value_type(newlV) != MATTE_VALUE_TYPE_STRING) { // already error
        return matte_store_new_value(store);
    }
    const matteString_t * other = matte_value_string_get_string_unsafe(store, newlV);
    matteValue_t out = matte_store_new_value(store);    
    
    uint32_t i, n;
    uint32_t len = matte_string_get_length(str);
    uint32_t lenOther = matte_string_get_length(other);
    if (!lenOther || lenOther > len) {
        matte_value_into_number(store, &out, -1);
        return out;      
    }
    for(i = 0; i < len - (lenOther-1); ++i) {
        for(n = 0; n < lenOther && i+n < len; ++n) {
            if (matte_string_get_char(str, i+n) !=
                matte_string_get_char(other, n)) {
                break;
            }
        }
        
        if (n == lenOther) {
            matte_value_into_number(store, &out, i);
            return out;
        }
    }
        
    matte_value_into_number(store, &out, -1);
    return out;      
}

static matteValue_t vm_ext_call__string__search_all(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    matteStore_t * store = vm->store;
    const matteString_t * str = matte_value_string_get_string_unsafe(store, args[0]);
    
    matteValue_t newlV = matte_value_as_string(store, args[1]);
    if (matte_value_type(newlV) != MATTE_VALUE_TYPE_STRING) { // already error
        return matte_store_new_value(store);
    }
    const matteString_t * other = matte_value_string_get_string_unsafe(store, newlV);
    matteValue_t out = matte_store_new_value(store);    
    
    uint32_t i, n;
    uint32_t len = matte_string_get_length(str);
    uint32_t lenOther = matte_string_get_length(other);

    matteArray_t * results = matte_array_create(sizeof(matteValue_t));
    if (!lenOther || lenOther > len) {
        matte_value_into_new_object_array_ref(store, &out, results);
        matte_array_destroy(results);
        return out;      
    }
    for(i = 0; i < len - (lenOther-1); ++i) {
        for(n = 0; n < lenOther && i+n < len; ++n) {
            if (matte_string_get_char(str, i+n) !=
                matte_string_get_char(other, n)) {
                break;
            }
        }
        
        if (n == lenOther) {
            matte_value_into_number(store, &out, i);
            matte_array_push(results, out);
            out = matte_store_new_value(store);
        }
    }
        
    matte_value_into_new_object_array_ref(store, &out, results);
    matte_array_destroy(results);
    return out;      
}

static matteValue_t vm_ext_call__string__contains(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);
    matteStore_t * store = vm->store;
    const matteString_t * str = matte_value_string_get_string_unsafe(store, args[0]);

    matteValue_t newlV = matte_value_as_string(store, args[1]);
    if (matte_value_type(newlV) != MATTE_VALUE_TYPE_STRING) { // already error
        return matte_store_new_value(store);
    }
    const matteString_t * other = matte_value_string_get_string_unsafe(store, newlV);
    matteValue_t out = matte_store_new_value(store);    


    matte_value_into_boolean(store, &out, matte_string_test_contains(str, other));
    return out;    
}


static int get_digits(double val) {
    if (val <= 1) return 1;
    return ((int)(log10(val))) + 1;
}

static matteValue_t vm_ext_call__string__format(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    matteStore_t * store = matte_vm_get_store(vm);

    if (matte_value_type(args[1]) != MATTE_VALUE_TYPE_OBJECT) {
        matte_vm_raise_error_cstring(vm, "'items' array input must be an object.");
        return matte_store_new_value(store);
    }


    // keys are always preferred
    uint32_t len = matte_value_object_get_number_key_count(store, args[1]);
    uint32_t i;
    
    if (len == 0) {
        return matte_value_as_string(store, args[0]);
    }
    matteArray_t * vals   = matte_array_create(sizeof(matteValue_t));    

    for(i = 0; i < len; ++i) {
        matteValue_t str = matte_value_as_string(
            store, 
            matte_value_object_access_index(
                store, 
                args[1], 
                i
            )
        );
        if (matte_value_type(str) != MATTE_VALUE_TYPE_STRING || vm->pendingCatchable) {
            matte_array_destroy(vals);
            return matte_store_new_value(store);
        }
        
        matte_array_push(vals, str);
    }
    
    uint32_t keycount = len;    
    


    
    uint32_t n;
    const matteString_t * src = matte_value_string_get_string_unsafe(store, args[0]);
    matteString_t * str = matte_string_clone(src);
    len = matte_string_get_length(str);



    
    uint32_t strIter = 0;
    for(i = 0; i < len; ++i, ++strIter) {
        if (matte_string_get_char(src, i) != '%') continue;
        if (i == len-1) continue;
    
        uint32_t next = matte_string_get_char(src, i+1);
    
    
        int otherLen;
        const matteString_t * newst;
        int index = -1;
        if (next == '%') {
            otherLen = 2;
            newst = MATTE_VM_STR_CAST(vm, "%");        
        
        } else if (sscanf(
            matte_string_get_c_str(matte_string_get_substr(src, i+1, matte_string_get_length(src)-1)),
            "%d",
            &index
        ) && index >= 0 && index < keycount) {
            otherLen = 1 + get_digits(index);
            newst = matte_value_string_get_string_unsafe(store, matte_array_at(vals, matteValue_t, index));        
        } else { // invalid index
            continue;
        }


        matte_string_remove_n_chars(str, strIter, otherLen);
        uint32_t lenNew = matte_string_get_length(newst);
        if (i >= len - otherLen) {
            matte_string_concat(str, newst); 
        } else {
            uint32_t * buffer = malloc(matte_string_get_length(newst) * sizeof(uint32_t));
            for(n = 0; n < lenNew; ++n) {
                buffer[n] = matte_string_get_char(newst, n);                        
            }
            matte_string_insert_n_chars(
                str, 
                strIter, 
                buffer, 
                lenNew
            ); 
            free(buffer);
        }
        i += otherLen-1;
        strIter += lenNew-1;

    }
    
    for(i = 0; i < keycount; ++i) {
        matte_store_recycle(store, matte_array_at(vals, matteValue_t, i));    
    }
    matte_array_destroy(vals);
    matteValue_t out = matte_store_new_value(store);    
    matte_value_into_string(store, &out, str);
    matte_string_destroy(str);
    return out;  
}


static matteValue_t vm_ext_call__string__replace(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    matteStore_t * store = matte_vm_get_store(vm);


    matteArray_t * keys = matte_array_create(sizeof(matteString_t*));    
    // keys are always preferred
    if (matte_value_type(args[3]) != MATTE_VALUE_TYPE_EMPTY) {
        uint32_t len = matte_value_object_get_number_key_count(store, args[3]);
        uint32_t i;
        
        if (len == 0) {
            matte_vm_raise_error_cstring(vm, "'keys' array input for replace cannot be empty.");
            matte_array_destroy(keys);
            return matte_store_new_value(store);
        }
        for(i = 0; i < len; ++i) {
                    
            const matteString_t * other = matte_value_string_get_string_unsafe(
                store, 
                matte_value_object_access_index(
                    store, 
                    args[3], 
                    i
                )
            );
            matte_array_push(keys, other);
        }
        
    // else, single key
    } else {
        matteValue_t newlV = matte_value_as_string(store, args[1]);
        if (matte_value_type(newlV) != MATTE_VALUE_TYPE_STRING) {
            matte_array_destroy(keys);
            return matte_store_new_value(store);
        }

        const matteString_t * other = matte_value_string_get_string_unsafe(store, newlV);
        matte_array_push(keys, other);
    }
    
    matteString_t * str = matte_string_clone(matte_value_string_get_string_unsafe(store, args[0]));
    matteValue_t newlV = matte_value_as_string(store, args[2]);
    if (matte_value_type(newlV) != MATTE_VALUE_TYPE_STRING) {
        matte_array_destroy(keys);
        return matte_store_new_value(store);
    }
    const matteString_t * newst = matte_value_string_get_string_unsafe(store, newlV);


    matteValue_t out = matte_store_new_value(store);    
    
    uint32_t i, n;
    uint32_t len = matte_string_get_length(str);
    uint32_t lenNew = matte_string_get_length(newst);

    uint32_t * newstBuffer = (uint32_t*)matte_allocate(sizeof(uint32_t) * lenNew);
    for(n = 0; n < lenNew; ++n) {
        newstBuffer[n] = matte_string_get_char(newst, n);
    }

    uint32_t nkeys = matte_array_get_size(keys);
    uint32_t k;
    for(k = 0; k < nkeys; ++k) {
        const matteString_t * other = matte_array_at(keys, matteString_t *, k);
        uint32_t lenOther = matte_string_get_length(other);
        if (len >= lenOther-1) {
            for(i = 0; i < len - (lenOther-1); ++i) {
                for(n = 0; n < lenOther && i+n < len; ++n) {
                    if (matte_string_get_char(str, i+n) !=
                        matte_string_get_char(other, n)) {
                        break;
                    }
                }
                
                if (n == lenOther) { // found:
                    matte_string_remove_n_chars(str, i, lenOther);
                    if (i >= len - lenOther) {
                        matte_string_concat(str, newst); 
                    } else {
                        matte_string_insert_n_chars(str, i, newstBuffer, lenNew); 
                    }
                    len = matte_string_get_length(str);
                    i += lenNew-1;
                }
            }
        }
    }
    matte_array_destroy(keys);
    matte_deallocate(newstBuffer);
    matte_value_into_string(store, &out, str);
    matte_string_destroy(str);
    return out;  
}

static matteValue_t vm_ext_call__string__count(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    matteStore_t * store = matte_vm_get_store(vm);
    const matteString_t * str = matte_value_string_get_string_unsafe(store, args[0]);

    matteValue_t newlV = matte_value_as_string(vm->store, args[1]);
    if (matte_value_type(newlV) != MATTE_VALUE_TYPE_STRING) {
        return matte_store_new_value(store);
    }
    const matteString_t * other = matte_value_string_get_string_unsafe(store, newlV);
    matteValue_t out = matte_store_new_value(store);    
    
    uint32_t i, n;
    uint32_t len = matte_string_get_length(str);
    uint32_t lenOther = matte_string_get_length(other);
    uint32_t count = 0;
    for(i = 0; i < len - (lenOther-1); ++i) {
        for(n = 0; n < lenOther && i+n < len; ++n) {
            if (matte_string_get_char(str, i+n) !=
                matte_string_get_char(other, n)) {
                break;
            }
        }
        
        if (n == lenOther) {
            count++;
        }
    }
        
    matte_value_into_number(store, &out, count);
    return out;  
}

static matteValue_t vm_ext_call__string__charcodeat(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);


    uint32_t key = matte_value_as_number(vm->store, args[1]);
    matteValue_t strV = matte_store_new_value(vm->store);
    const matteString_t * str = matte_value_string_get_string_unsafe(vm->store, args[0]);
    if (key >= matte_string_get_length(str)) {
        matte_vm_raise_error_cstring(vm, "Index out of bounds.");
        return matte_store_new_value(vm->store);
    } 
    matte_value_into_number(vm->store, &strV, matte_string_get_char(str, key));    
    return strV;
    
}




static matteValue_t vm_ext_call__string__charat(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);


    uint32_t key = matte_value_as_number(vm->store, args[1]);
    matteValue_t strV = matte_store_new_value(vm->store);
    const matteString_t * str = matte_value_string_get_string_unsafe(vm->store, args[0]);
    if (key >= matte_string_get_length(str)) {
        matte_vm_raise_error_cstring(vm, "Index out of bounds.");
        return matte_store_new_value(vm->store);
    } 
    matte_value_into_string(vm->store, &strV, matte_string_get_substr(str, key, key));        
    return strV;
}

static matteValue_t vm_ext_call__string__setcharcodeat(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);


    uint32_t key = matte_value_as_number(vm->store, args[1]);
    uint32_t r = (uint32_t)matte_value_as_number(vm->store, args[2]);

    matteValue_t strV = matte_store_new_value(vm->store);
    matteString_t * str = matte_string_clone(matte_value_string_get_string_unsafe(vm->store, args[0]));
    if (key >= matte_string_get_length(str)) {
        matte_vm_raise_error_cstring(vm, "Index out of bounds.");
        matte_string_destroy(str);
        return matte_store_new_value(vm->store);
    } 

    matte_string_set_char(str, key, r);
    matte_value_into_string(vm->store, &strV, str);
    matte_string_destroy(str);
    return strV;
    
}





static matteValue_t vm_ext_call__string__setcharat(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);


    uint32_t key = matte_value_as_number(vm->store, args[1]);
    matteValue_t rs = matte_value_as_string(vm->store, args[2]);
    if (matte_value_type(rs) != MATTE_VALUE_TYPE_STRING) {
        return matte_store_new_value(vm->store);
    }
    const matteString_t * r = matte_value_string_get_string_unsafe(vm->store, rs);
    
    if (!matte_string_get_length(r)) {
        matte_vm_raise_error_cstring(vm, "Given string argument is empty");
        return matte_store_new_value(vm->store);
    }
    matteValue_t strV = matte_store_new_value(vm->store);
    matteString_t * str = matte_string_clone(matte_value_string_get_string_unsafe(vm->store, args[0]));
    if (key >= matte_string_get_length(str)) {
        matte_vm_raise_error_cstring(vm, "Index out of bounds.");
        matte_string_destroy(str);
        return matte_store_new_value(vm->store);
    } 


    matte_string_set_char(str, key, matte_string_get_char(r, 0));
    matte_value_into_string(vm->store, &strV, str);
    matte_string_destroy(str);
    matte_store_recycle(vm->store, rs);
    return strV;
}

static matteValue_t vm_ext_call__string__combine(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {

    if (matte_value_type(args[0]) != MATTE_VALUE_TYPE_OBJECT) {
        matte_vm_raise_error_cstring(vm, "Expected Object as parameter for string combination. (The object should contain string values to combine).");
        return matte_store_new_value(vm->store);        
    }
    
    matteString_t * str = matte_string_create();
    matteValue_t out = {};   
    matte_value_into_number(vm->store, &out, -1);
    uint32_t len = matte_value_object_get_number_key_count(vm->store, args[0]);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        if (vm->pendingCatchable) break;
        matteValue_t v = matte_value_as_string(vm->store, matte_value_object_access_index(vm->store, args[0], i));
        matte_string_concat(str, matte_value_string_get_string_unsafe(vm->store, v));
        matte_store_recycle(vm->store, v);
    }
    
    matteValue_t outstr = {};
    matte_value_into_string(vm->store, &outstr, str);
    matte_string_destroy(str);
    return outstr;
}




static matteValue_t vm_ext_call__string__removechar(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    matteString_t * str = matte_string_clone(matte_value_string_get_string_unsafe(vm->store, args[0]));

    uint32_t index = matte_value_as_number(vm->store, args[1]);
    if (index >= matte_string_get_length(str)) {
        matte_vm_raise_error_string(vm, MATTE_VM_STR_CAST(vm, "String index is out of bounds"));
        return matte_store_new_value(vm->store);        
    }

    matte_string_remove_n_chars(str, index, 1);

    matteValue_t strV = matte_store_new_value(vm->store);
    matte_value_into_string(vm->store, &strV, str);
    matte_string_destroy(str);
    return strV;
}


static matteValue_t vm_ext_call__string__substr(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    uint32_t from = matte_value_as_number(vm->store, args[1]);
    uint32_t to = matte_value_as_number(vm->store, args[2]);
    return matte_value_subset(vm->store, args[0], from, to);
}

static matteValue_t vm_ext_call__string__split(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)) return matte_store_new_value(vm->store);

    matteStore_t * store = matte_vm_get_store(vm);

    matteValue_t newlV = matte_value_as_string(vm->store, args[1]);
    if (matte_value_type(newlV) != MATTE_VALUE_TYPE_STRING) {
        return matte_store_new_value(store);
    }
    const matteString_t * other = matte_value_string_get_string_unsafe(store, newlV);
    matteValue_t out = matte_store_new_value(store);    
    const matteString_t * str = matte_value_string_get_string_unsafe(store, args[0]);
    matteArray_t * arr = matte_array_create(sizeof(matteValue_t));
    
    uint32_t i, n = 0;
    uint32_t len = matte_string_get_length(str);
    uint32_t lenOther = matte_string_get_length(other);
    uint32_t lastStart = 0;
    for(i = 0; i < len; ++i) {
        for(n = 0; n < lenOther && i+n < len; ++n) {
            if (matte_string_get_char(str, i+n) !=
                matte_string_get_char(other, n)) {
                break;
            }
        }
        
        if (n == lenOther) {
            if (i) {
                const matteString_t * subgood = matte_string_get_substr(str, lastStart, i-1);
                matteValue_t subv = matte_store_new_value(store);
                matte_value_into_string(store, &subv, subgood);            
                matte_array_push(arr, subv);
            }
            i += lenOther-1;
            lastStart = i+1;
        }
    }
    if (n != lenOther && len) {
        const matteString_t * subgood = matte_string_get_substr(str, lastStart, len-1);
        matteValue_t subv = matte_store_new_value(store);
        matte_value_into_string(store, &subv, subgood);            
        matte_array_push(arr, subv);
    }

    matte_value_into_new_object_array_ref(store, &out, arr);
    matte_array_destroy(arr);
    return out;  
}




typedef struct {
    int start;
    char * str;
} ScanAnchor;

static int scan__index_of(const char * str, const char * substr) {
    const char * sub = strstr(str, substr);
    if (sub == NULL) return -1;
    return (int)(sub - str);
}

static ScanAnchor scan__new_anchor(const char * str, int start, int len) {
    ScanAnchor anchor;
    anchor.start = start;
    char * newsub = (char*)matte_allocate(len+1);
    memcpy(newsub, str+start, len);
    newsub[len] = 0;
    anchor.str = newsub;
    return anchor;    
}

static matteArray_t * scan__get_anchor_set(const char * str) {
    int from = 0;
    int lastfrom = 0;
    
    matteArray_t * anchors = matte_array_create(sizeof(ScanAnchor));
    while((from = scan__index_of(str+lastfrom, "[%]")) != -1) {
        from += lastfrom;
        ScanAnchor anchor = scan__new_anchor(str, lastfrom, from-lastfrom);
        matte_array_push(anchors, anchor);
        lastfrom = from+3; // skip [%]
    }
    
    int lenstr = strlen(str);
    ScanAnchor anchor = scan__new_anchor(str, lastfrom, lenstr - lastfrom);
    matte_array_push(anchors, anchor);    
    return anchors;
}

static void scan__cleanup_found_subs(matteArray_t * subs) {
    uint32_t len = matte_array_get_size(subs);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        matte_deallocate(matte_array_at(subs, char*, i));    
    }
    
    matte_array_destroy(subs);
}

static void scan__destroy_anchor_set(matteArray_t * subs) {
    uint32_t len = matte_array_get_size(subs);
    uint32_t i;
    for(i = 0; i < len; ++i) {
        matte_deallocate(matte_array_at(subs, ScanAnchor, i).str);
    }
    
    matte_array_destroy(subs);
}



static matteValue_t vm_ext_call__string__scan(matteVM_t * vm, matteValue_t fn, const matteValue_t * args, void * userData) {
    if (!ensure_arg_string(vm, args)  ) return matte_store_new_value(vm->store);
    if (!ensure_arg_string(vm, args+1)) return matte_store_new_value(vm->store);

    const matteString_t * str = matte_value_string_get_string_unsafe(vm->store, args[0]);
    const matteString_t * fmt = matte_value_string_get_string_unsafe(vm->store, args[1]);

    const char * str_c = matte_string_get_c_str(str);
    const char * fmt_c = matte_string_get_c_str(fmt);
    int lenstr = strlen(str_c);
    int lenfmt = strlen(fmt_c);


    matteArray_t * anchors = scan__get_anchor_set(fmt_c);
    matteArray_t * subs = matte_array_create(sizeof(char*));
    matteValue_t out = matte_store_new_value(vm->store);
    uint32_t len;
    uint32_t i;    
    len = matte_array_get_size(anchors);
    int offset = 0;
    int lastoffset = 0;
    for(i = 0; i < len; ++i) {
        ScanAnchor * anchor = &matte_array_at(anchors, ScanAnchor, i);
        if (anchor->str[0] == 0 && (anchor->start != 0 && anchor->start != lenfmt)) {
            scan__destroy_anchor_set(anchors);    
            scan__cleanup_found_subs(subs);            

            matte_vm_raise_error_cstring(vm, "Built-in String function 'scan' disallows 2 format anchors [%] next to each other.");
            matte_value_into_new_object_ref(vm->store, &out);
            return out;            
        }
        
        
        if (anchor->start == lenfmt) // get remainder if last
            offset = lenstr;
        else {        
            offset = scan__index_of(str_c+lastoffset, anchor->str);
            if (offset == -1) {
                scan__destroy_anchor_set(anchors);    
                scan__cleanup_found_subs(subs);            
                
                matte_value_into_new_object_ref(vm->store, &out);
                return out;
            }
            offset+=lastoffset;
        }
        
        // the anchor was found. 
        if (anchor->start != 0) {
                
            int len = (offset - lastoffset);
            char * newstr = (char*)matte_allocate(len+1);
            memcpy(newstr, str_c+lastoffset, len);
            newstr[len] = 0;
            matte_array_push(subs, newstr);
        }
        
        
        lastoffset = offset+strlen(anchor->str);
    }



    // take found subs (char*) and turn into matteValue strings for output
    matteArray_t * arr = matte_array_create(sizeof(matteValue_t));
    len = matte_array_get_size(subs);
    for(i = 0; i < len; ++i) {
        matteString_t * s = matte_string_create_from_c_str(matte_array_at(subs, char *, i));
        matteValue_t s_v = matte_store_new_value(vm->store);
        matte_value_into_string(vm->store, &s_v, s);
        matte_string_destroy(s);    
        matte_array_push(arr, s_v);
    }
    
    matte_value_into_new_object_array_ref(
        vm->store,
        &out,
        arr
    );
    
    matte_array_destroy(arr);
    scan__cleanup_found_subs(subs);            
    scan__destroy_anchor_set(anchors);    
    return out;
}



