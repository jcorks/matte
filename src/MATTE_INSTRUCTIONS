/*
    Serialized instructions for use by the compiler.
*/



static void write_instruction__prf(matteArray_t * insts, uint32_t lineNumber, uint32_t referrable) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_PRF;
    memcpy(inst.data, &referrable, sizeof(uint32_t));
    matte_array_push(insts, inst);
}



static void write_instruction__nem(matteArray_t * insts, uint32_t lineNumber) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_NEM;
    matte_array_push(insts, inst);
}

static void write_instruction__nnm(matteArray_t * insts, uint32_t lineNumber, double val) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_NNM;
    memcpy(inst.data, &val, sizeof(double));
    matte_array_push(insts, inst);
}

static void write_instruction__nbl(matteArray_t * insts, uint32_t lineNumber, int b) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_NBL;
    inst.data[0] = b;
    matte_array_push(insts, inst);
}


static void write_instruction__nst(matteArray_t * insts, uint32_t lineNumber, uint32_t id) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_NST;
    memcpy(inst.data, &id, sizeof(uint32_t));
    matte_array_push(insts, inst);
}


static void write_instruction__nob(matteArray_t * insts, uint32_t lineNumber) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_NOB;
    matte_array_push(insts, inst);
}



static void write_instruction__nfn(matteArray_t * insts, uint32_t lineNumber, uint32_t stubID) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_NFN;
    memcpy(inst.data+sizeof(uint32_t), &stubID, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__sfs(matteArray_t * insts, uint32_t lineNumber, uint32_t sfsCount) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_SFS;
    memcpy(inst.data, &sfsCount, sizeof(uint32_t));
    matte_array_push(insts, inst);
}



static void write_instruction__nar(matteArray_t * insts, uint32_t lineNumber, uint32_t nItems) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_NAR;
    memcpy(inst.data, &nItems, sizeof(uint32_t));
    matte_array_push(insts, inst);
}



static void write_instruction__nso(matteArray_t * insts, uint32_t lineNumber, uint32_t nPairs) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_NSO;
    memcpy(inst.data, &nPairs, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__cal(matteArray_t * insts, uint32_t lineNumber, uint32_t args) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_CAL;
    memcpy(inst.data, &args, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__arf(matteArray_t * insts, uint32_t lineNumber, uint32_t ref, uint32_t op) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_ARF;
    memcpy(inst.data,   &ref, sizeof(uint32_t));
    memcpy(inst.data+4, &op,  sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__osn(matteArray_t * insts, uint32_t lineNumber, uint32_t opcode) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_OSN;
    memcpy(inst.data, &opcode, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__olk(matteArray_t * insts, uint32_t lineNumber, uint32_t bracket) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_OLK;
    memcpy(inst.data, &bracket, sizeof(uint32_t));    
    matte_array_push(insts, inst);
}


static void write_instruction__opr(matteArray_t * insts, uint32_t lineNumber, int op) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_OPR;
    inst.data[0] = op;
    matte_array_push(insts, inst);
}


static void write_instruction__ext(matteArray_t * insts, uint32_t lineNumber, matteExtCall_t ext) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_EXT;
    uint64_t prop = ext;
    memcpy(inst.data, &prop, sizeof(uint64_t));
    matte_array_push(insts, inst);
}

static void write_instruction__pop(matteArray_t * insts, uint32_t lineNumber, uint32_t n) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_POP;
    memcpy(inst.data, &n, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__pnr(matteArray_t * insts, uint32_t lineNumber, uint32_t n) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_PNR;
    memcpy(inst.data, &n, sizeof(uint32_t));
    matte_array_push(insts, inst);
}



static void write_instruction__cpy(matteArray_t * insts, uint32_t lineNumber) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_CPY;
    matte_array_push(insts, inst);
}

static void write_instruction__qry(matteArray_t * insts, uint32_t lineNumber, uint32_t query) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_QRY;
    memcpy(inst.data, &query, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__ret(matteArray_t * insts, uint32_t lineNumber) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_RET;
    matte_array_push(insts, inst);
}


static void write_instruction__skp_insert(matteArray_t * insts, uint32_t lineNumber, uint32_t ninst) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_SKP;
    memcpy(inst.data, &ninst, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__asp(matteArray_t * insts, uint32_t lineNumber, uint32_t ninst) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_ASP;
    memcpy(inst.data, &ninst, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

static void write_instruction__pto(matteArray_t * insts, uint32_t lineNumber, uint32_t type) {
    matteBytecodeStubInstruction_t inst;
    inst.lineNumber = lineNumber;
    inst.opcode = MATTE_OPCODE_PTO;
    memcpy(inst.data, &type, sizeof(uint32_t));
    matte_array_push(insts, inst);
}

