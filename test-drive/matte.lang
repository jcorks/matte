Prism.languages.matte = {
	'comment': [
		{
			pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
			lookbehind: true,
			greedy: true
		},
		{
			pattern: /(^|[^\\:])\/\/.*/,
			lookbehind: true,
			greedy: true
		}
	],
	'string': {
		pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
		greedy: true
	},
	'keyword': /\b(?:if|else|import|return|match|default|when|send|error|parameters)\b/,
	'boolean': /\b(?:false|true|empty|Number|Type|Object|String|Function)\b/,
	'function': /\b\w+(?=\()/,
	'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
	'operator': /@:|@|::|<-|<=|=>|->(cos|sin|tan|acos|asin|atan2|aqrt|abs|isNaN|floor|ceil|round|ceil|round|asRadians|asDegrees|removeChar|substr|split|scan|length|search|contains|replace|count|charCodeAt|charAt|setCharCodeAt|setCharAt|keycount|keys|values|push|pop|insert|remove|setAttributes|sort|subset|filter|findIndex|isa|map|type)/,
	'punctuation': /[{}[\];(),.]|=/,
	'property': /.*(:|::)/,
	
	
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	//'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
	'number': {
		pattern: RegExp(
			/(^|[^\w$])/.source +
			'(?:' +
			(
				// constant
				/NaN|Infinity/.source +
				'|' +
				// binary integer
				/0[bB][01]+(?:_[01]+)*n?/.source +
				'|' +
				// octal integer
				/0[oO][0-7]+(?:_[0-7]+)*n?/.source +
				'|' +
				// hexadecimal integer
				/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source +
				'|' +
				// decimal bigint
				/\d+(?:_\d+)*n/.source +
				'|' +
				// decimal number (integer or float) but no bigint
				/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source
			) +
			')' +
			/(?![\w$])/.source
		),
		lookbehind: true
	}
};


Prism.languages.webmanifest = Prism.languages.matte;

Prism.languages.matteout = {
	'keyword': /\b(?:if|else|import|return|match|default|when|send|error|parameters)\b/,
	'boolean': /\b(?:false|true|empty|Number|Type|Object|String|Function)\b/,
	'operator': /=>/,
	'punctuation': /[{}[\];(),.]|=/,
	'property': /.*(:|::)/,
	
	
	// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
	//'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
	'number': {
		pattern: RegExp(
			/(^|[^\w$])/.source +
			'(?:' +
			(
				// constant
				/NaN|Infinity/.source +
				'|' +
				// binary integer
				/0[bB][01]+(?:_[01]+)*n?/.source +
				'|' +
				// octal integer
				/0[oO][0-7]+(?:_[0-7]+)*n?/.source +
				'|' +
				// hexadecimal integer
				/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source +
				'|' +
				// decimal bigint
				/\d+(?:_\d+)*n/.source +
				'|' +
				// decimal number (integer or float) but no bigint
				/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source
			) +
			')' +
			/(?![\w$])/.source
		),
		lookbehind: true
	}
};


Prism.languages.webmanifest = Prism.languages.matteout;
