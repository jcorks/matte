<?xml version="1.0" encoding="UTF-8"?>
<!--

    GtkSourceView language highlighting for Matte
    Johnathan Corkery, 2022

-->
<language id="mt" _name="Matte" version="2.0" _section="Source">
    <metadata>
      <property name="globs">*.mt</property>
      <property name="line-comment-start">//</property>
      <property name="block-comment-start">/*</property>
      <property name="block-comment-end">*/</property>
    </metadata>

    <styles>
        <style id="comment"           name="Comment"             map-to="def:comment"/>
        <style id="error"             name="Error"               map-to="def:error"/>
        <style id="string"            name="String"              map-to="def:string"/>
        <style id="string-dq"         name="String Double-Quote" map-to="def:string"/>
        <style id="keyword"           name="Keyword"             map-to="def:keyword"/>
        <style id="builtin"           name="Builtin"             map-to="def:constant"/>
        <style id="type"              name="Data Type"           map-to="def:type"/>
        <style id="escaped-character" name="Escaped Character"   map-to="def:special-char"/>
        <style id="floating-point"    name="Floating point number" map-to="def:floating-point"/>
        <style id="decimal"           name="Decimal number"      map-to="def:decimal"/>
        <style id="octal"             name="Octal number"        map-to="def:base-n-integer"/>
        <style id="hexadecimal"       name="Hexadecimal number"  map-to="def:base-n-integer"/>
        <style id="boolean"           name="Boolean value"       map-to="def:boolean"/>
        <style id="dash"              name="Dash Function"       map-to="def:operator"/>
        <style id="variable"          name="Variable"            map-to="def:keyword"/>
        <style id="bindings"          name="Bindings"            map-to="def:preprocessor"/>
        <style id="function"          name="Function"            map-to="def:function"/>
    </styles>

    <definitions>
        <!-- http://en.wikipedia.org/wiki/C_syntax#Strings -->
        <define-regex id="escaped-character" extended="true">
            \\(                   # leading backslash
            [\\\"\'nrtfav\?e] |   # escaped character
            [0-7]{1,3} |          # one, two, or three octal digits
            x[0-9A-Fa-f]{0,2}     # 'x' followed by zero, one, or two hex digits
            )
        </define-regex>
        
        


        <context id="mt" class="no-spell-check">
            <include>
                <!-- Comments -->
                <context id="comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
                    <start>//</start>
                    <include>
                      <context ref="def:in-line-comment"/>
                    </include>
                </context>

                <context id="comment-multiline" style-ref="comment" class="comment" class-disabled="no-spell-check">
                    <start>/\*</start>
                    <end>\*/</end>
                    <include>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <context id="close-comment-outside-comment" style-ref="error">
                    <match>\*/(?!\*)</match>
                </context>


                <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
                  <start>'</start>
                  <end>'</end>
                  <include>
                    <context id="escaped-character" style-ref="escaped-character">
                      <match>\%{escaped-character}</match>
                    </context>
                  </include>
                </context>

                <context id="string-dq" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
                  <start>"</start>
                  <end>"</end>
                  <include>
                    <context id="escaped-character-dq" style-ref="escaped-character">
                      <match>\%{escaped-character}</match>
                    </context>
                  </include>
                </context>

                <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
                <context id="float" style-ref="floating-point">
                    <match extended="true">
                        (?&lt;![\w\.])
                        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
                         ([0-9]+[Ee][+-]?[0-9]*))
                        [fFlL]?
                        (?![\w\.])
                    </match>
                </context>

                <context id="hexadecimal" style-ref="hexadecimal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        0[xX][a-fA-F0-9]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <context id="octal" style-ref="octal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        0[0-7]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <context id="decimal" style-ref="decimal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        [0-9]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <!-- Keywords -->
                <context id="keywords" style-ref="keyword">
                    <keyword>if</keyword>
                    <keyword>else</keyword>
                    <keyword>return</keyword>
                    <keyword>match</keyword>
                    <keyword>default</keyword>
                    <keyword>when</keyword>
                </context>

                <context id="types" style-ref="type">
                    <keyword>Number</keyword>
                    <keyword>String</keyword>
                    <keyword>Boolean</keyword>
                    <keyword>Empty</keyword>
                    <keyword>Object</keyword>
                    <keyword>Type</keyword>
                    <keyword>Function</keyword>
                </context>

                <context id="dash">
                    <match extended="true">(::&lt;=)</match>
                    <include>
                        <context id="dashsyntax" sub-pattern="1" style-ref="dash"/>
                    </include>
                </context>

                <context id="bindings" >
                    <match extended="true">([a-zA-Z_][a-zA-Z_0-9]*)\s*((:(?!:))|:::)</match>
                    <include>
                        <context id="binding-name" sub-pattern="1" style-ref="bindings"/>
                    </include>
                </context>

                <context id="variable" style-ref="variable">
                    <match extended="true">(@:|@|\[|\])</match>
                    <include>
                        <context id="var-name" sub-pattern="1" style-ref="variable"/>
                    </include>
                </context>


                <!-- C99 booleans -->
                <context id="boolean" style-ref="boolean">
                    <keyword>true</keyword>
                    <keyword>false</keyword>
                    <keyword>empty</keyword>
                    <keyword>parameters</keyword>
                    <keyword>cos</keyword>             
                    <keyword>sin</keyword>             
                    <keyword>tan</keyword>             
                    <keyword>acos</keyword>             
                    <keyword>asin</keyword>             
                    <keyword>atan2</keyword>             
                    <keyword>sqrt</keyword>             
                    <keyword>abs</keyword>             
                    <keyword>isNaN</keyword>             
                    <keyword>floor</keyword>             
                    <keyword>ceil</keyword>             
                    <keyword>round</keyword>             
                    <keyword>asRadians</keyword>             
                    <keyword>asDegrees</keyword>             
                    <keyword>removeChar</keyword>             
                    <keyword>substr</keyword>             
                    <keyword>split</keyword>             
                    <keyword>scan</keyword>             
                    <keyword>length</keyword>             
                    <keyword>search</keyword>             
                    <keyword>contains</keyword>             
                    <keyword>replace</keyword>             
                    <keyword>count</keyword>             
                    <keyword>charCodeAt</keyword>             
                    <keyword>charAt</keyword>             
                    <keyword>setCharCodeAt</keyword>             
                    <keyword>setCharAt</keyword>             
                    <keyword>keycount</keyword>             
                    <keyword>keys</keyword>             
                    <keyword>values</keyword>             
                    <keyword>push</keyword>             
                    <keyword>pop</keyword>             
                    <keyword>insert</keyword>             
                    <keyword>remove</keyword>             
                    <keyword>setAttributes</keyword>             
                    <keyword>attributes</keyword>             
                    <keyword>sort</keyword>             
                    <keyword>subset</keyword>             
                    <keyword>filter</keyword>             
                    <keyword>findIndex</keyword>             
                    <keyword>isa</keyword>             
                    <keyword>map</keyword>             
                    <keyword>filter</keyword>             
                    <keyword>type</keyword>             
                </context>

                <!--<context id="builtin" style-ref="def:constant">
                    <keyword>print</keyword>
                    <keyword>listen</keyword>
                    <keyword>error</keyword>
                    <keyword>send</keyword>
                    <keyword>for</keyword>
                    <keyword>foreach</keyword>
                    <keyword>type</keyword>
                    <keyword>loop</keyword>
                    <keyword>getExternalFunction</keyword>
                    <keyword>type</keyword>
                </context>-->

                <context id="function">
                    <match extended="true">
                        ([a-zA-Z_][a-zA-Z_0-9]*)\s*(\(|::)
                    </match>
                    <include>
                        <context id="function-name" sub-pattern="1" style-ref="function"/>
                    </include>
                </context>
            </include>
        </context>
    </definitions>
</language>
